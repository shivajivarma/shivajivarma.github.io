{"version":3,"sources":["src/components/content/divider/divider.scss?tag=goat-divider&encapsulation=shadow","src/components/content/divider/divider.tsx"],"names":["dividerCss","Divider","[object Object]","hostRef","this","vertical","slotHasContent","elm","hasChildNodes","h","Host","class","divider","has-content"],"mappings":"oDAAA,MAAMA,EAAa,u6CCYNC,EAAO,MALpBC,YAAAC,aAQyBC,KAAAC,SAAoB,MAElCD,KAAAE,eAAiB,MAG1BJ,oBACEE,KAAKE,eAAiBF,KAAKG,IAAIC,gBAGjCN,SACE,OACEO,EAACC,EAAI,KACHD,EAAA,MAAA,CAAKE,MAAO,CACVC,QAAW,KACXP,SAAYD,KAAKC,SACjBQ,cAAeT,KAAKE,iBAEpBG,EAAA,MAAA,CAAKE,MAAM,SACXF,EAAA,MAAA,CAAKE,MAAM,kBACTF,EAAA,OAAA,OAEFA,EAAA,MAAA,CAAKE,MAAM","sourcesContent":["@import \"../../../globalStyles/commons\";\n\n:host {\n  color: v(--text-secondary);\n  display: block;\n}\n\n.divider {\n  display: flex;\n  margin: 0;\n\n  &:not(.vertical) {\n    width: 100%;\n    padding: v(--spacing-2) 0;\n    align-items: center;\n    justify-content: center;\n    .line {\n      width: 100%;\n      border-top: 1px solid v(--border-color);\n    }\n\n    &.has-content .slot-container {\n      padding: 0 v(--spacing-3);\n    }\n  }\n\n  &.vertical {\n    height: 100%;\n    padding: 0 v(--spacing-2);\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n    .line {\n      height: 100%;\n      border-right: 1px solid v(--border-color);\n    }\n\n    &.has-content .slot-container {\n      padding: v(--spacing-3) 0;\n    }\n  }\n\n}\n\n:host(:not([vertical])) {\n  width: auto;\n}\n\n:host([vertical]) {\n  height: auto;\n}\n","import { Component, ComponentInterface, Element, h, Host, Prop, State } from '@stencil/core';\n\n/**\n * @name Divider\n * @description A divider can be used to segment content vertically or horizontally.\n * @example <goat-divider style=\"width: 12rem;\">or</goat-divider>\n */\n@Component({\n  tag: 'goat-divider',\n  styleUrl: 'divider.scss',\n  shadow: true,\n})\nexport class Divider implements ComponentInterface {\n\n\n  @Prop({reflect: true}) vertical: boolean = false;\n\n  @State() slotHasContent = false;\n  @Element() elm!: HTMLElement;\n\n  componentWillLoad() {\n    this.slotHasContent = this.elm.hasChildNodes();\n  }\n\n  render() {\n    return (\n      <Host>\n        <div class={{\n          'divider': true,\n          'vertical': this.vertical,\n          'has-content': this.slotHasContent,\n        }}>\n          <div class=\"line\"/>\n          <div class='slot-container'>\n            <slot />\n          </div>\n          <div class=\"line\" />\n        </div>\n      </Host>\n    );\n  }\n\n\n}\n"]}