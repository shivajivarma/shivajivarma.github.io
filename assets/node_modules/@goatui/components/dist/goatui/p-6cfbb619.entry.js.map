{"version":3,"sources":["src/components/content/notification/notification.scss?tag=goat-notification&encapsulation=shadow","src/components/content/notification/notification.tsx","src/components/content/toast/toast.scss?tag=goat-toast&encapsulation=shadow","src/components/content/toast/toast.tsx"],"names":["notificationCss","Notification","[object Object]","hostRef","this","state","lowContrast","dismissible","actionable","actionName","actionLabel","hidden","isDarkMode","observeThemeChange","h","Host","class","notification","low-contrast","role","renderStateIcon","name","renderAction","renderCloseButton","close-button","aria-label","size","ElementSize","SMALL","icon","variant","onGoat:click","evt","goatDismiss","emit","toastCss","Toast","message","toast","dark-mode"],"mappings":"kHAAA,MAAMA,EAAkB,4qJCgBXC,EAAY,MALzBC,YAAAC,uDASUC,KAAAC,MAAkD,OAElDD,KAAAE,YAAuB,MAEvBF,KAAAG,YAAuB,MAEvBH,KAAAI,WAAsB,KACtBJ,KAAAK,WAAqB,UACrBL,KAAAM,YAAsB,UAIrBN,KAAAO,OAAkB,MAElBP,KAAAQ,WAAsBA,IAE/BV,oBACEW,GAAmB,KACjBT,KAAKQ,WAAaA,OAItBV,SACE,OACEY,EAACC,EAAI,CAACV,MAAOD,KAAKC,MAAOM,OAAQP,KAAKO,QACpCG,EAAA,MAAA,CAAKE,MAAO,CAAEC,aAAgB,KAAMC,eAAgBd,KAAKE,aAAea,KAAK,SAC3EL,EAAA,MAAA,CAAKE,MAAM,cACRZ,KAAKgB,mBAERN,EAAA,MAAA,CAAKE,MAAM,WACTF,EAAA,MAAA,CAAKE,MAAM,SACTF,EAAA,OAAA,CAAMO,KAAK,UACXP,EAAA,OAAA,OAEFA,EAAA,MAAA,CAAKE,MAAM,YACTF,EAAA,OAAA,CAAMO,KAAK,eAGdjB,KAAKkB,eACLlB,KAAKmB,sBAMdrB,eACE,GAAIE,KAAKI,WACP,OACEM,EAAA,MAAA,CAAKE,MAAM,UACTF,EAAA,OAAA,CAAMO,KAAK,YAKnBnB,oBAEE,GAAIE,KAAKG,YAAa,CACpB,OACEO,EAAA,MAAA,CAAKE,MAAM,0BACTF,EAAA,cAAA,CAAaE,MAAO,CAAEQ,eAAgB,MAAMC,aACpB,cACXC,KAAMC,EAAYC,MAClBC,KAAK,IACLC,QAAQ,OAAMC,eACCC,IACb5B,KAAKO,OAAS,KACdP,KAAK6B,YAAYC,KAAKF,QAO7C9B,kBACE,GAAIE,KAAKC,QAAU,UAAW,CAC5B,OAAOS,EAAA,YAAA,CAAWE,MAAM,UAAUK,KAAK,oBAAoBK,KAAK,YAC3D,GAAItB,KAAKC,QAAU,QAAS,CACjC,OAAOS,EAAA,YAAA,CAAWE,MAAM,UAAUK,KAAK,gBAAgBK,KAAK,YACvD,GAAItB,KAAKC,QAAU,OAAQ,CAChC,OAAOS,EAAA,YAAA,CAAWE,MAAM,UAAUK,KAAK,mBAAmBK,KAAK,YAC1D,GAAItB,KAAKC,QAAU,UAAW,CACnC,OAAOS,EAAA,YAAA,CAAWE,MAAM,UAAUK,KAAK,0BAA0BK,KAAK,6CCrG5E,MAAMS,EAAW,mxDCcJC,EAAK,MALlBlC,YAAAC,aASUC,KAAAiC,QAAkB,GAEDjC,KAAAC,MAAkD,OAElED,KAAAQ,WAAsBA,IAE/BV,oBACEW,GAAmB,KACjBT,KAAKQ,WAAaA,OAItBV,kBACE,GAAIE,KAAKC,QAAU,UAAW,CAC5B,OAAOS,EAAA,YAAA,CAAWE,MAAM,UAAUK,KAAK,oBAAoBK,KAAK,YAC3D,GAAItB,KAAKC,QAAU,QAAS,CACjC,OAAOS,EAAA,YAAA,CAAWE,MAAM,UAAUK,KAAK,gBAAgBK,KAAK,YACvD,GAAItB,KAAKC,QAAU,OAAQ,CAChC,OAAOS,EAAA,YAAA,CAAWE,MAAM,UAAUK,KAAK,mBAAmBK,KAAK,YAC1D,GAAItB,KAAKC,QAAU,UAAW,CACnC,OAAOS,EAAA,YAAA,CAAWE,MAAM,UAAUK,KAAK,0BAA0BK,KAAK,QAI1ExB,SACE,OACEY,EAACC,EAAI,KACHD,EAAA,MAAA,CAAKE,MAAO,CAAEsB,MAAS,KAAMC,YAAanC,KAAKQ,YAAcO,KAAK,SAChEL,EAAA,MAAA,CAAKE,MAAM,cACRZ,KAAKgB,mBAERN,EAAA,MAAA,CAAKE,MAAM,WACTF,EAAA,MAAA,CAAKE,MAAM,WACRZ,KAAKiC","sourcesContent":["@import \"../../../globalStyles/commons\";\n\n\n:host {\n  display: block;\n  margin-bottom: v(--spacing-3);\n}\n\n.notification {\n  border-style: solid;\n  border-color: transparent;\n  display: flex;\n\n  .state-icon {\n    padding: v(--spacing-5) v(--spacing-4);\n  }\n\n  .content {\n    flex: 1;\n    padding: v(--spacing-4) 0;\n\n    .title {\n      @include font-style(text-md);\n      font-weight: v(--font-weight-bold);\n    }\n\n    .subtitle {\n      @include font-style(text-sm);\n    }\n  }\n\n\n  .close-button {\n    margin: 0;\n    padding: v(--spacing-3);\n  }\n}\n\n:host(:not([dismissible])) .content {\n  padding-inline-end: v(--spacing-4);\n}\n\n\n@mixin alertState($color, $dark) {\n  @if $dark {\n    .alert {\n      background-color: v(--color-#{$color});\n\n      .content {\n        .message {\n          color: white;\n          --link-color: white;\n        }\n\n        .description {\n          color: v(--text-primary);\n        }\n      }\n    }\n  } @else {\n    .alert {\n      background-color: v(--color-#{$color}-20);\n\n      .content {\n        .message {\n          color: v(--color-#{$color}-70);\n          --link-color: #{v(--color-#{$color}-70)};\n        }\n\n        .description {\n          color: v(--text-secondary);\n        }\n      }\n    }\n  }\n}\n\n@each $state in [info, success, warning, error] {\n  :host([state=\"#{$state}\"]) {\n    .notification {\n      border-left-color: v(--support-#{$state}-inverse);\n      color: v(--text-inverse);\n      background: v(--background-inverse);\n      border-width: 0 0 0 3px;\n\n      .close-button {\n        --button-color: #{v(--text-inverse)};\n      }\n      .state-icon {\n        color: v(--support-#{$state}-inverse);\n      }\n\n      &.low-contrast {\n        color: var(--color-neutral-100);\n        border-color: v(--support-#{$state});\n        background: v(--color-#{$state}-10);\n        border-width: 1px 1px 1px 3px;\n        .close-button {\n          --button-color: #{v(--color-neutral-100)};\n        }\n        .state-icon {\n          color: v(--support-#{$state});\n        }\n      }\n    }\n  }\n}\n","import { Component, ComponentInterface, Element, Event, EventEmitter, h, Host, Prop, State } from '@stencil/core';\nimport { ElementSize, isDarkMode, observeThemeChange } from '../../../utils/utils';\n\n\n/**\n * @name Notification\n * @description Notifications are messages that communicate information to the user.\n * @example <goat-notification state=\"success\" low-contrast dismissible>\n *               <div slot='title'>Successful saved the record</div>\n *             </goat-notification>\n */\n@Component({\n  tag: 'goat-notification',\n  styleUrl: 'notification.scss',\n  shadow: true,\n})\nexport class Notification implements ComponentInterface {\n\n  @Element() elm!: HTMLElement;\n\n  @Prop() state: 'success' | 'error' | 'info' | 'warning' = 'info';\n\n  @Prop() lowContrast: boolean = false;\n\n  @Prop() dismissible: boolean = false;\n\n  @Prop() actionable: boolean = true;\n  @Prop() actionName: string = 'dismiss';\n  @Prop() actionLabel: string = 'Dismiss';\n\n  @Event({ eventName: 'goat:dismiss' }) goatDismiss: EventEmitter;\n\n  @State() hidden: boolean = false;\n\n  @State() isDarkMode: boolean = isDarkMode();\n\n  componentWillLoad() {\n    observeThemeChange(() => {\n      this.isDarkMode = isDarkMode();\n    });\n  }\n\n  render() {\n    return (\n      <Host state={this.state} hidden={this.hidden}>\n        <div class={{ 'notification': true, 'low-contrast': this.lowContrast }} role='alert'>\n          <div class='state-icon'>\n            {this.renderStateIcon()}\n          </div>\n          <div class='content'>\n            <div class='title'>\n              <slot name='title' />\n              <slot />\n            </div>\n            <div class='subtitle'>\n              <slot name='subtitle' />\n            </div>\n          </div>\n          {this.renderAction()}\n          {this.renderCloseButton()}\n        </div>\n      </Host>\n    );\n  }\n\n  renderAction() {\n    if (this.actionable)\n      return (\n        <div class='action'>\n          <slot name='action' />\n        </div>\n      );\n  }\n\n  renderCloseButton() {\n\n    if (this.dismissible) {\n      return (\n        <div class=\"close-button-container\">\n          <goat-button class={{ 'close-button': true }}\n                       aria-label='Close alert'\n                       size={ElementSize.SMALL}\n                       icon='x'\n                       variant='link'\n                       onGoat:click={(evt) => {\n                         this.hidden = true;\n                         this.goatDismiss.emit(evt);\n                       }} />\n        </div>\n      );\n    }\n  }\n\n  renderStateIcon() {\n    if (this.state === 'success') {\n      return <goat-icon class='inherit' name='check-circle-fill' size='sm' />;\n    } else if (this.state === 'error') {\n      return <goat-icon class='inherit' name='x-circle-fill' size='sm' />;\n    } else if (this.state === 'info') {\n      return <goat-icon class='inherit' name='info-circle-fill' size='sm' />;\n    } else if (this.state === 'warning') {\n      return <goat-icon class='inherit' name='exclamation-circle-fill' size='sm' />;\n    }\n  }\n\n}\n","@import \"../../../globalStyles/commons\";\n\n\n:host {\n  display: inline-block;\n  margin-bottom: v(--spacing-3);\n}\n\n.toast {\n  border-radius: v(--border-radius);\n  display: flex;\n  align-items: center;\n  gap: v(--spacing-2);\n  padding: v(--spacing-2) v(--spacing-4);\n  border: 1px solid v(--ui-03);\n  box-shadow: v(--shadow-lg);\n  background-color: v(--background);\n\n  .content {\n    flex: 1;\n    color: v(--text-primary);\n\n    .message {\n      @include font-style(text-md);\n    }\n\n    .description {\n      @include font-style(text-sm);\n    }\n  }\n\n  .state-icon {\n    line-height: 0;\n  }\n}\n\n\n@each $state in [info, success, warning, error] {\n  :host([state=\"#{$state}\"]) {\n    .state-icon {\n      color: v(--color-#{$state});\n    }\n  }\n  :host-context([data-theme=\"dark\"]):host([state=\"#{$state}\"]) {\n\n  }\n}\n","import { Component, ComponentInterface, Element, h, Host, Prop, State } from '@stencil/core';\nimport { isDarkMode, observeThemeChange } from '../../../utils/utils';\n\n\n/**\n * @name Toast\n * @description Toasts are lightweight notifications.\n * @example <goat-toast state=\"success\" message=\"Successful saved the record\"></goat-toast>\n */\n@Component({\n  tag: 'goat-toast',\n  styleUrl: 'toast.scss',\n  shadow: true,\n})\nexport class Toast implements ComponentInterface {\n\n  @Element() elm!: HTMLElement;\n\n  @Prop() message: string = '';\n\n  @Prop({ reflect: true }) state: 'success' | 'error' | 'info' | 'warning' = 'info';\n\n  @State() isDarkMode: boolean = isDarkMode();\n\n  componentWillLoad() {\n    observeThemeChange(() => {\n      this.isDarkMode = isDarkMode();\n    });\n  }\n\n  renderStateIcon() {\n    if (this.state === 'success') {\n      return <goat-icon class='inherit' name='check-circle-fill' size='sm' />;\n    } else if (this.state === 'error') {\n      return <goat-icon class='inherit' name='x-circle-fill' size='sm' />;\n    } else if (this.state === 'info') {\n      return <goat-icon class='inherit' name='info-circle-fill' size='sm' />;\n    } else if (this.state === 'warning') {\n      return <goat-icon class='inherit' name='exclamation-circle-fill' size='sm' />;\n    }\n  }\n\n  render() {\n    return (\n      <Host>\n        <div class={{ 'toast': true, 'dark-mode': this.isDarkMode }} role='alert'>\n          <div class='state-icon'>\n            {this.renderStateIcon()}\n          </div>\n          <div class='content'>\n            <div class='message'>\n              {this.message}\n            </div>\n          </div>\n        </div>\n      </Host>\n    );\n  }\n\n}\n"]}