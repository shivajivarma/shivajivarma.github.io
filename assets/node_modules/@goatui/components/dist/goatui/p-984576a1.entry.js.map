{"version":3,"sources":["src/components/app-shell/sidenav-menu/sidenav-menu.scss?tag=goat-sidenav-menu&encapsulation=shadow","src/components/app-shell/sidenav-menu/sidenav-menu.tsx"],"names":["sidenavMenuCss","SidenavMenu","[object Object]","hostRef","this","showLoader","empty","emptyState","internalEmptyState","JSON","parse","evt","path","composedPath","menuItem","elm","tagName","key","preventDefault","focusNextItem","focusPreviousItem","firstMenuItem","getFirstItem","setFocus","querySelector","currentItem","nextItem","nextElementSibling","disabled","previousItem","previousElementSibling","parseEmptyState","h","class","renderEmptyState","slot","title","description"],"mappings":"kDAAA,MAAMA,EAAiB,kgCCQVC,EAAW,MALxBC,YAAAC,aAUUC,KAAAC,WAAsB,MAILD,KAAAE,MAAiB,MAEjBF,KAAAG,WAAqB,uFAS9CL,kBACE,GAAIE,KAAKG,WAAY,CACnBH,KAAKI,mBAAqBC,KAAKC,MAAMN,KAAKG,aAK9CL,cAAcS,GACZ,MAAMC,EAAOD,EAAIE,eACjB,IAAIC,EAAW,KACf,IAAK,MAAMC,KAAOH,EAAM,CAEtB,GAAIG,EAAIC,UAAY,iBAAkB,CACpCF,EAAWC,EAEb,GAAIA,IAAQX,KAAKW,IACf,SACF,GAAIJ,EAAIM,MAAQ,YAAa,CAC3BN,EAAIO,iBACJd,KAAKe,cAAcL,QACd,GAAIH,EAAIM,MAAQ,UAAW,CAChCN,EAAIO,iBACJd,KAAKgB,kBAAkBN,KAU7BZ,iBACE,MAAMmB,EAAgBjB,KAAKkB,eAC3BD,IAAa,MAAbA,SAAa,OAAA,EAAbA,EAAeE,WAGTrB,eACN,OAAOE,KAAKW,IAAIS,cAAc,kBAGxBtB,cAAcuB,GACpB,IAAIC,EAAgBD,EAAYE,mBAChC,EAAG,CACD,GAAID,GAAYA,EAASV,UAAY,mBAAqBU,EAASE,SAAU,CAC3EF,EAASH,WACT,OAEF,IAAKG,EAAU,CACbA,EAAWtB,KAAKW,IAAIS,cAAc,sBAC7B,CACLE,EAAWA,EAASC,0BAEfD,IAAaD,GAGhBvB,kBAAkBuB,GACxB,IAAII,EAAoBJ,EAAYK,uBACpC,EAAG,CACD,GAAID,GAAgBA,EAAab,UAAY,mBAAqBa,EAAaD,SAAU,CACvFC,EAAaN,WACb,OAEF,IAAKM,EAAc,CACjBA,EAAezB,KAAKW,IAAIS,cAAc,iCACjC,CACLK,EAAeA,EAAaC,8BAEvBD,IAAiBJ,GAI5BvB,oBACEE,KAAK2B,kBAIP7B,SACE,OAAO8B,EAAA,MAAA,CAAKC,MAAM,QAChBD,EAAA,OAAA,MACC5B,KAAK8B,oBAIFhC,mBACN,GAAIE,KAAKE,MACP,OAAO0B,EAAA,mBAAA,CAAkBC,MAAM,cAC7BD,EAAA,MAAA,CAAKG,KAAK,SAAS/B,KAAKI,mBAAmB4B,OAC3CJ,EAAA,MAAA,CAAKG,KAAK,eAAe/B,KAAKI,mBAAmB6B","sourcesContent":["@import \"../../../globalStyles/commons\";\n\n:host {\n  display: inline-block;\n  --list-border-radius: #{v(--border-radius)};\n  --list-max-height: inherit;\n}\n\n\n.menu {\n  background-color: v(--field-02);\n  padding: v(--spacing-2) 0;\n  border: 1px solid v(--color-neutral-200);\n  box-sizing: border-box;\n  border-radius: var(--list-border-radius);\n  box-shadow: v(--shadow-sm);\n}\n","import { Component, ComponentInterface, Element, h, Listen, Method, Prop, State, Watch } from '@stencil/core';\n\n\n@Component({\n  tag: 'goat-sidenav-menu',\n  styleUrl: 'sidenav-menu.scss',\n  shadow: true,\n})\nexport class SidenavMenu implements ComponentInterface {\n\n\n  @Element() elm!: HTMLElement;\n\n  @Prop() showLoader: boolean = false;\n\n  @Prop({ mutable: true }) value?: string | number;\n\n  @Prop({ mutable: true }) empty: boolean = false;\n\n  @Prop({ mutable: true }) emptyState: string = `{\n    \"title\": \"No items\",\n    \"description\": \"There are no items to display\"\n  }`;\n\n  @State()\n  internalEmptyState: {title: string, description: string};\n\n  @Watch('emptyState')\n  parseEmptyState() {\n    if (this.emptyState) {\n      this.internalEmptyState = JSON.parse(this.emptyState);\n    }\n  }\n\n  @Listen('keydown', { target: 'window' })\n  handleKeyDown(evt: KeyboardEvent) {\n    const path = evt.composedPath();\n    let menuItem = null;\n    for (const elm of path) {\n      // @ts-ignore\n      if (elm.tagName === 'GOAT-MENU-ITEM') {\n        menuItem = elm;\n      }\n      if (elm !== this.elm)\n        continue;\n      if (evt.key === 'ArrowDown') {\n        evt.preventDefault();\n        this.focusNextItem(menuItem);\n      } else if (evt.key === 'ArrowUp') {\n        evt.preventDefault();\n        this.focusPreviousItem(menuItem);\n      }\n    }\n  }\n\n  /**\n   * Sets focus on first menu item. Use this method instead of the global\n   * `element.focus()`.\n   */\n  @Method()\n  async setFocus() {\n    const firstMenuItem = this.getFirstItem();\n    firstMenuItem?.setFocus();\n  }\n\n  private getFirstItem() {\n    return this.elm.querySelector('goat-menu-item');\n  }\n\n  private focusNextItem(currentItem) {\n    let nextItem: any = currentItem.nextElementSibling;\n    do {\n      if (nextItem && nextItem.tagName === 'GOAT-MENU-ITEM' && !nextItem.disabled) {\n        nextItem.setFocus();\n        return;\n      }\n      if (!nextItem) {\n        nextItem = this.elm.querySelector('goat-menu-item');\n      } else {\n        nextItem = nextItem.nextElementSibling;\n      }\n    } while (nextItem !== currentItem);\n  }\n\n  private focusPreviousItem(currentItem) {\n    let previousItem: any = currentItem.previousElementSibling;\n    do {\n      if (previousItem && previousItem.tagName === 'GOAT-MENU-ITEM' && !previousItem.disabled) {\n        previousItem.setFocus();\n        return;\n      }\n      if (!previousItem) {\n        previousItem = this.elm.querySelector('goat-menu-item:last-child');\n      } else {\n        previousItem = previousItem.previousElementSibling;\n      }\n    } while (previousItem !== currentItem);\n  }\n\n\n  componentWillLoad() {\n    this.parseEmptyState();\n  }\n\n\n  render() {\n    return <div class='menu'>\n      <slot />\n      {this.renderEmptyState()}\n    </div>;\n  }\n\n  private renderEmptyState() {\n    if (this.empty)\n      return <goat-empty-state class=\"empty-menu\">\n        <div slot='title'>{this.internalEmptyState.title}</div>\n        <div slot='description'>{this.internalEmptyState.description}</div>\n      </goat-empty-state>;\n  }\n\n}\n"]}