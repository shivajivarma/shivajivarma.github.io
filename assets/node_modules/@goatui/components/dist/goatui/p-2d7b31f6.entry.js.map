{"version":3,"sources":["src/components/form/textarea/textarea.scss?tag=goat-textarea&encapsulation=shadow","src/components/form/textarea/textarea.tsx"],"names":["textareaCss","Textarea","[object Object]","hostRef","this","gid","getComponentIndex","name","size","disabled","readonly","state","required","debounce","clearable","configAria","hasFocus","endSlotHasContent","inputHandler","ev","input","target","value","p4Input","emit","p4Change","blurHandler","p4Blur","focusHandler","p4Focus","clearInput","evt","nativeInput","keyDownHandler","key","focus","blur","debounceEvent","toString","getValue","length","elm","hasAttribute","tabindex","getAttribute","undefined","removeAttribute","getAttributeNames","forEach","includes","querySelector","debounceChanged","h","Host","has-focus","has-value","hasValue","class","input-container","textarea","end-slot-has-content","Object","assign","rows","ref","placeholder","onKeyDown","onInput","onBlur","onFocus","onClick"],"mappings":"2GAAA,MAAMA,EAAc,u5KCyBPC,EAAQ,MALrBC,YAAAC,8MAOEC,KAAAC,IAAcC,IAKNF,KAAAG,KAAe,cAAcH,KAAKC,MAgBlBD,KAAAI,KAA2B,KAK5BJ,KAAAK,SAAoB,MAKlBL,KAAAM,SAAqB,MAOrBN,KAAAO,MAAqD,UAMtEP,KAAAQ,SAAoB,MAMpBR,KAAAS,SAAW,IAKXT,KAAAU,UAAY,MAGmBV,KAAAW,WAAkB,GAgEhDX,KAAAY,SAAW,MACXZ,KAAAa,kBAAoB,MAGrBb,KAAAc,aAAgBC,IACtB,MAAMC,EAAQD,EAAGE,OACjB,GAAID,EAAO,CACThB,KAAKkB,MAAQF,EAAME,OAAS,GAE9BlB,KAAKmB,QAAQC,KAAKL,GAClBf,KAAKqB,SAASD,KAAKL,IAGbf,KAAAsB,YAAeP,IACrBf,KAAKY,SAAW,MAChBZ,KAAKuB,OAAOH,KAAKL,IAGXf,KAAAwB,aAAgBT,IACtBf,KAAKY,SAAW,KAChBZ,KAAKyB,QAAQL,KAAKL,IAYZf,KAAA0B,WAAcC,IACpB3B,KAAK4B,YAAYV,MAAQ,GACzBlB,KAAKc,aAAaa,IAGZ3B,KAAA6B,eAAkBd,IACxB,GAAIA,EAAGe,MAAQ,UAAY9B,KAAKU,UAAW,CACzCV,KAAK0B,WAAWX,KAtEpBjB,iBACE,GAAIE,KAAK4B,YAAa,CACpB5B,KAAK4B,YAAYG,SASrBjC,gBACE,GAAIE,KAAK4B,YAAa,CACpB5B,KAAK4B,YAAYI,QAKrBlC,uBACE,OAAOE,KAAKC,IAIJH,kBACRE,KAAKqB,SAAWY,EAAcjC,KAAKqB,SAAUrB,KAAKS,UA+B5CX,WACN,OAAQE,KAAKkB,OAAS,IAAIgB,WAGpBpC,WACN,OAAOE,KAAKmC,WAAWC,OAAS,EAclCtC,oBAIE,GAAIE,KAAKqC,IAAIC,aAAa,YAAa,CACrC,MAAMC,EAAWvC,KAAKqC,IAAIG,aAAa,YACvCxC,KAAKuC,SAAWA,IAAa,KAAOA,EAAWE,UAC/CzC,KAAKqC,IAAIK,gBAAgB,YAE3B1C,KAAKqC,IAAIM,oBAAoBC,SAASzC,IACpC,GAAIA,EAAK0C,SAAS,SAAU,CAC1B7C,KAAKW,WAAWR,GAAQH,KAAKqC,IAAIG,aAAarC,GAC9CH,KAAKqC,IAAIK,gBAAgBvC,OAG7BH,KAAKa,oBAAsBb,KAAKqC,IAAIS,cAAc,gBAGpDhD,oBACEE,KAAK+C,kBAGPjD,SACE,OACEkD,EAACC,EAAI,CAAAC,YAAYlD,KAAKY,SAAQuC,YAAanD,KAAKoD,YAC9CJ,EAAA,MAAA,CAAKK,MAAO,CACVC,kBAAmB,KACnBC,SAAY,KACZlD,SAAYL,KAAKK,SACjBC,SAAYN,KAAKM,SACjB4C,YAAalD,KAAKY,SAClB4C,uBAAwBxD,KAAKa,oBAE1BmC,EAAA,WAAAS,OAAAC,OAAA,CACEC,KAAM,EACNC,IAAK5C,GAAShB,KAAK4B,YAAcZ,EACjCR,SAAUR,KAAKQ,SACf6C,MAAM,qBACNlD,KAAMH,KAAKG,KACX0D,YAAa7D,KAAK6D,YAClB3C,MAAOlB,KAAKkB,MACZqB,SAAUvC,KAAKuC,SACfuB,UAAW9D,KAAK6B,eAChBkC,QAAS/D,KAAKc,aACdkD,OAAQhE,KAAKsB,YACb2C,QAASjE,KAAKwB,aACdnB,SAAUL,KAAKK,UACXL,KAAKW,aAEbX,KAAKU,WAAaV,KAAKoD,YACtBJ,EAAA,YAAA,CAAWK,MAAM,6BAA6BlD,KAAK,gBAAgB+D,QAASlE,KAAK0B,aAEnFsB,EAAA,MAAA,CAAKK,MAAM,sBACTL,EAAA,OAAA,CAAM7C,KAAK","sourcesContent":["@import \"../common-input\";\n\n.textarea {\n  height: 100%;\n  align-items: flex-start;\n\n  .input-native {\n    height: 100%;\n    min-height: 5rem;\n    resize: vertical;\n  }\n}\n\n\n","import {\n  Component,\n  ComponentInterface,\n  Element,\n  Event,\n  EventEmitter,\n  h,\n  Host,\n  Method,\n  Prop,\n  State,\n  Watch,\n} from '@stencil/core';\nimport { debounceEvent, getComponentIndex } from '../../../utils/utils';\n\n/**\n * @name Textarea\n * @description Enables native inputs to be used within a Form field.\n * @example <goat-textarea placeholder=\"Enter some description over here\"></goat-textarea>\n */\n@Component({\n  tag: 'goat-textarea',\n  styleUrl: 'textarea.scss',\n  shadow: true,\n})\nexport class Textarea implements ComponentInterface, InputComponentInterface {\n\n  gid: string = getComponentIndex();\n\n  /**\n   * The input field name.\n   */\n  @Prop() name: string = `goat-input-${this.gid}`;\n\n  /**\n   * The input field placeholder.\n   */\n  @Prop() placeholder: string;\n\n  /**\n   * The input field value.\n   */\n  @Prop({ mutable: true }) value: string;\n\n  /**\n   * The button size.\n   * Possible values are: `\"sm\"`, `\"md\"`, `\"lg\"`. Defaults to `\"md\"`.\n   */\n  @Prop( {reflect: true}) size: 'sm' | 'md' | 'lg' = 'md';\n\n  /**\n   * If true, the user cannot interact with the button. Defaults to `false`.\n   */\n  @Prop({reflect: true}) disabled: boolean = false;\n\n  /**\n   * If true, the user read the value cannot modify it. Defaults to `false`.\n   */\n  @Prop({ reflect: true }) readonly : boolean = false;\n\n\n  /**\n   * The input state.\n   * Possible values are: `\"success\"`, `\"error\"`, `\"warning\"`, 'default'. Defaults to `\"default\"`.\n   */\n  @Prop({ reflect: true }) state: 'success' | 'error' | 'warning' | 'default' = 'default';\n\n\n  /**\n   * If true, required icon is show. Defaults to `false`.\n   */\n  @Prop() required: boolean = false;\n\n\n  /**\n   * Set the amount of time, in milliseconds, to wait to trigger the `goat:change` event after each keystroke.\n   */\n  @Prop() debounce = 300;\n\n  /**\n   * If `true`, a clear icon will appear in the input when there is a value. Clicking it clears the input.\n   */\n  @Prop() clearable = false;\n\n\n  @Prop( {reflect: true, mutable: true}) configAria: any = {};\n\n\n  /**\n   * Emitted when a keyboard input occurred.\n   */\n  @Event({ eventName: 'goat:input' }) p4Input: EventEmitter;\n\n  /**\n   * Emitted when the value has changed..\n   */\n  @Event({ eventName: 'goat:change' }) p4Change: EventEmitter;\n\n  /**\n   * Emitted when the input loses focus.\n   */\n  @Event({ eventName: 'goat:blur' }) p4Blur: EventEmitter;\n\n  /**\n   * Emitted when the input has focus.\n   */\n  @Event({ eventName: 'goat:focus' }) p4Focus: EventEmitter;\n\n  /**\n   * Emitted when the action button is clicked.\n   */\n  @Event({ eventName: 'goat:action-click' }) p4ActionClick: EventEmitter;\n\n  /**\n   * Sets focus on the native `input` in `ion-input`. Use this method instead of the global\n   * `input.focus()`.\n   */\n  @Method()\n  async setFocus() {\n    if (this.nativeInput) {\n      this.nativeInput.focus();\n    }\n  }\n\n  /**\n   * Sets blur on the native `input` in `ion-input`. Use this method instead of the global\n   * `input.blur()`.\n   */\n  @Method()\n  async setBlur() {\n    if (this.nativeInput) {\n      this.nativeInput.blur();\n    }\n  }\n\n  @Method()\n  async getComponentId() {\n    return this.gid;\n  }\n\n  @Watch('debounce')\n  protected debounceChanged() {\n    this.p4Change = debounceEvent(this.p4Change, this.debounce);\n  }\n\n\n  @Element() elm!: HTMLElement;\n  private nativeInput?: HTMLTextAreaElement;\n  private tabindex?: string | number;\n  @State() hasFocus = false;\n  @State() endSlotHasContent = false;\n\n\n  private inputHandler = (ev: Event) => {\n    const input = ev.target as HTMLInputElement | null;\n    if (input) {\n      this.value = input.value || '';\n    }\n    this.p4Input.emit(ev as KeyboardEvent);\n    this.p4Change.emit(ev as KeyboardEvent);\n  };\n\n  private blurHandler = (ev: FocusEvent) => {\n    this.hasFocus = false;\n    this.p4Blur.emit(ev);\n  };\n\n  private focusHandler = (ev: FocusEvent) => {\n    this.hasFocus = true;\n    this.p4Focus.emit(ev);\n  };\n\n\n  private getValue(): string {\n    return (this.value || '').toString();\n  }\n\n  private hasValue(): boolean {\n    return this.getValue().length > 0;\n  }\n\n  private clearInput = (evt: Event) => {\n    this.nativeInput.value = '';\n    this.inputHandler(evt);\n  };\n\n  private keyDownHandler = (ev: KeyboardEvent) => {\n    if (ev.key === 'Escape' && this.clearable) {\n      this.clearInput(ev);\n    }\n  };\n\n  componentWillLoad() {\n    // If the ion-input has a tabindex attribute we get the value\n    // and pass it down to the native input, then remove it from the\n    // ion-input to avoid causing tabbing twice on the same element\n    if (this.elm.hasAttribute('tabindex')) {\n      const tabindex = this.elm.getAttribute('tabindex');\n      this.tabindex = tabindex !== null ? tabindex : undefined;\n      this.elm.removeAttribute('tabindex');\n    }\n    this.elm.getAttributeNames().forEach((name: string) => {\n      if (name.includes('aria-')) {\n        this.configAria[name] = this.elm.getAttribute(name);\n        this.elm.removeAttribute(name);\n      }\n    });\n    this.endSlotHasContent = !!this.elm.querySelector('[slot=\"end\"]');\n  }\n\n  connectedCallback() {\n    this.debounceChanged();\n  }\n\n  render() {\n    return (\n      <Host has-focus={this.hasFocus} has-value={this.hasValue()}>\n        <div class={{\n          'input-container': true,\n          'textarea': true,\n          'disabled': this.disabled,\n          'readonly': this.readonly,\n          'has-focus': this.hasFocus,\n          'end-slot-has-content': this.endSlotHasContent,\n        }}>\n             <textarea\n               rows={4}\n               ref={input => this.nativeInput = input}\n               required={this.required}\n               class='input input-native'\n               name={this.name}\n               placeholder={this.placeholder}\n               value={this.value}\n               tabindex={this.tabindex}\n               onKeyDown={this.keyDownHandler}\n               onInput={this.inputHandler}\n               onBlur={this.blurHandler}\n               onFocus={this.focusHandler}\n               disabled={this.disabled}\n               {...this.configAria}/>\n\n          {this.clearable && this.hasValue() &&\n            <goat-icon class='clear inherit input-action' name='x-circle-fill' onClick={this.clearInput} />}\n\n          <div class='slot-container end'>\n            <slot name='end' />\n          </div>\n        </div>\n      </Host>\n    );\n  }\n\n}\n"]}