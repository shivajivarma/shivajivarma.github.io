{"version":3,"sources":["src/3d-party/monaco/index.tsx","src/components/form/code-editor/code-editor.scss?tag=goat-code-editor&encapsulation=shadow","src/components/form/code-editor/code-editor.tsx"],"names":["async","loadMonaco","version","window","paths","vs","loadScript","codeEditorCss","CodeEditor","[object Object]","hostRef","this","gid","getComponentIndex","name","required","disabled","readonly","theme","language","lineNumbers","debounce","hasFocus","p4Change","debounceEvent","newValue","editorMonacoInstance","updateOptions","readOnly","editor","setModelLanguage","getModel","setTheme","getValue","value","setValue","focus","blur","debounceChanged","setTimeout","initializeMonaco","monaco","editorElement","innerHTML","create","onDidChangeModelContent","emit","onDidFocusEditorText","onDidBlurEditorText","h","Host","class","component","code-editor-component","has-focus","ref","el"],"mappings":"2GAEeA,eAAeC,IAC5B,MAAMC,EAAU,SAEhBC,OAAO,WAAa,CAAEC,MAAO,CAAEC,GAAM,wDAAwDH,mBACvFI,EAAW,wDAAwDJ,4BACnEI,EAAW,wDAAwDJ,4CACnEI,EAAW,wDAAwDJ,kCCR3E,MAAMK,EAAgB,48qECcTC,EAAU,MALvBC,YAAAC,mDAOEC,KAAAC,IAAcC,IAMNF,KAAAG,KAAe,cAAcH,KAAKC,MAUjBD,KAAAI,SAAoB,MAMtBJ,KAAAK,SAAoB,MAEpBL,KAAAM,SAAqB,MAEpCN,KAAAO,MAAgC,WAEhCP,KAAAQ,SAA2C,aAE3CR,KAAAS,YAA4B,KAU5BT,KAAAU,SAAW,IAEVV,KAAAW,SAAW,MAIVb,kBACRE,KAAKY,SAAWC,EAAcb,KAAKY,SAAUZ,KAAKU,UAIpDZ,gBAAgBgB,GACdd,KAAKe,qBAAqBC,cAAc,CAAEC,SAAUH,GAAYd,KAAKM,WAIvER,gBAAgBgB,GACdd,KAAKe,qBAAqBC,cAAc,CAAEC,SAAUH,GAAYd,KAAKK,WAIvEP,gBAAgBgB,GACdtB,OAAO,UAAU0B,OAAOC,iBAAiBnB,KAAKe,qBAAqBK,WAAYN,GAIjFhB,aAAagB,GACXtB,OAAO,UAAU0B,OAAOG,SAASP,GAInChB,aAAagB,GACX,GAAId,KAAKe,qBAAqBO,aAAetB,KAAKuB,MAAO,CACvDvB,KAAKe,qBAAqBS,SAASV,IAKvChB,uBACE,OAAOE,KAAKC,IAQdH,iBACE,GAAIE,KAAKe,qBAAsB,CAC7Bf,KAAKe,qBAAqBU,SAS9B3B,gBACE,GAAIE,KAAKe,qBAAsB,CAC7Bf,KAAKe,qBAAqBW,QAO9B5B,0BACEE,KAAK2B,kBACL,IAAKnC,OAAO,UAAW,OACfF,KAIVQ,mBACE8B,YAAW,IAAM5B,KAAK6B,oBAAoB,KAGpC/B,mBACN,MAAMgC,EAAStC,OAAO,UAItBQ,KAAK+B,cAAcC,UAAY,GAE/BhC,KAAKe,qBAAuBe,EAAOZ,OAAOe,OAAOjC,KAAK+B,cAAe,CACnER,MAAOvB,KAAKuB,MACZd,YAAaT,KAAKS,YAClBD,SAAUR,KAAKQ,SACfD,MAAOP,KAAKO,MACZU,SAAUjB,KAAKK,UAAYL,KAAKM,WAIlCN,KAAKe,qBAAqBmB,yBAAwB,KAChDlC,KAAKuB,MAAQvB,KAAKe,qBAAqBO,WACvCtB,KAAKY,SAASuB,KAAK,CAAEZ,MAAOvB,KAAKuB,WAGnCvB,KAAKe,qBAAqBqB,sBAAqB,KAC7CpC,KAAKW,SAAW,QAGlBX,KAAKe,qBAAqBsB,qBAAoB,KAC5CrC,KAAKW,SAAW,SAIpBb,SACE,OACEwC,EAACC,EAAI,KACHD,EAAA,MAAA,CAAKE,MAAO,CACVC,UAAa,KACbC,wBAAyB,KACzB5C,CAACE,KAAKO,OAAQ,KACdF,SAAYL,KAAKK,SACjBC,SAAYN,KAAKM,SACjBqC,YAAa3C,KAAKW,WAElB2B,EAAA,MAAA,CAAKE,MAAM,SAASI,IAAKC,GAAM7C,KAAK+B,cAAgBc,KAClD7C,KAAKe,sBAAwBuB,EAAA,MAAA,CAAKE,MAAM,sBACxCF,EAAA,eAAA,CAAcE,MAAM,YAAY","sourcesContent":["import { loadScript } from '../../utils/utils';\n\nexport default async function loadMonaco() {\n  const version = '0.21.2';\n  // @ts-ignore\n  window['require'] = { paths: { 'vs': `https://cdnjs.cloudflare.com/ajax/libs/monaco-editor/${version}/min/vs` } };\n  await loadScript(`https://cdnjs.cloudflare.com/ajax/libs/monaco-editor/${version}/min/vs/loader.js`);\n  await loadScript(`https://cdnjs.cloudflare.com/ajax/libs/monaco-editor/${version}/min/vs/editor/editor.main.nls.js`);\n  await loadScript(`https://cdnjs.cloudflare.com/ajax/libs/monaco-editor/${version}/min/vs/editor/editor.main.js`);\n}\n","@import \"../../../3d-party/monaco/editor.main\";\n@import \"../../../globalStyles/commons\";\n\n:host {\n  display: block;\n  height: 100%;\n}\n\n.code-editor-loader {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  gap: v(--spacing-2);\n}\n\n.code-editor-component {\n  height: 100%;\n  position: relative;\n\n  .editor {\n    height: 100%;\n    min-height: 2rem;\n    border: 1px solid v(--border-color);\n    border-radius: v(--border-radius);\n    overflow: hidden;\n\n    &[readonly], &[readonly=\"true\"] {\n      color: v(--color-neutral);\n      background-color: v(--color-neutral-10);\n      border-color: v(--color-neutral);\n      cursor: default;\n    }\n    &[disabled], &[disabled=\"true\"] {\n      color: v(--color-neutral);\n      background-color: v(--color-neutral-10);\n      border-color: v(--color-neutral);\n      cursor: not-allowed;\n    }\n  }\n\n  &.disabled {\n    .monaco-editor, .monaco-editor-background, .monaco-editor .inputarea.ime-input, .view-lines {\n      cursor: default;\n    }\n  }\n\n  &.disabled.vs-light {\n    .monaco-editor, .monaco-editor-background, .monaco-editor .inputarea.ime-input, .monaco-editor .margin {\n      background: v(--color-neutral-200);\n    }\n  }\n\n  &.disabled.vs-dark {\n    .monaco-editor, .monaco-editor-background, .monaco-editor .inputarea.ime-input, .monaco-editor .margin {\n      background: v(--color-neutral-800);\n    }\n  }\n\n}\n\n\n/**\n * States\n */\n.code-editor-component.has-focus .editor {\n  @include focus-ring;\n  border-color: transparent;\n}\n\n@each $state in [success, warning, error] {\n  :host-context(.input-state-#{$state}) {\n    .code-editor-component {\n      .editor {\n        border-color: v(--support-#{$state});\n      }\n\n      &.has-focus {\n        .editor {\n          @include focus-ring(v(--support-#{$state}));\n        }\n      }\n    }\n  }\n}\n","import { Component, ComponentInterface, Event, EventEmitter, h, Host, Method, Prop, State, Watch } from '@stencil/core';\nimport { debounceEvent, getComponentIndex } from '../../../utils/utils';\nimport loadMonaco from '../../../3d-party/monaco';\n\n/**\n * @name Code Editor\n * @description A browser based code editor.\n * @img /assets/img/code-editor.png\n */\n@Component({\n  tag: 'goat-code-editor',\n  styleUrl: 'code-editor.scss',\n  shadow: true,\n})\nexport class CodeEditor implements ComponentInterface, InputComponentInterface {\n\n  gid: string = getComponentIndex();\n\n\n  /**\n   * The input field name.\n   */\n  @Prop() name: string = `goat-input-${this.gid}`;\n\n  /**\n   * The input field value.\n   */\n  @Prop({ mutable: true }) value: string;\n\n  /**\n   * If true, required icon is show. Defaults to `false`.\n   */\n  @Prop({ reflect: true }) required: boolean = false;\n\n\n  /**\n   * If true, the user cannot interact with the button. Defaults to `false`.\n   */\n  @Prop({reflect: true}) disabled: boolean = false;\n\n  @Prop({reflect: true}) readonly : boolean = false;\n\n  @Prop() theme: 'vs-light' | 'vs-dark' = 'vs-light';\n\n  @Prop() language: 'javascript' | 'json' | 'html' = 'javascript';\n\n  @Prop() lineNumbers: 'off' | 'on' = 'on';\n\n  /**\n   * Emitted when the value has changed..\n   */\n  @Event({ eventName: 'goat:change' }) p4Change: EventEmitter;\n\n  /**\n   * Set the amount of time, in milliseconds, to wait to trigger the `onChange` event after each keystroke.\n   */\n  @Prop() debounce = 250;\n\n  @State() hasFocus = false;\n\n\n  @Watch('debounce')\n  protected debounceChanged() {\n    this.p4Change = debounceEvent(this.p4Change, this.debounce);\n  }\n\n  @Watch('disabled')\n  disabledWatcher(newValue: string) {\n    this.editorMonacoInstance.updateOptions({ readOnly: newValue || this.readonly});\n  }\n\n  @Watch('readonly')\n  readonlyWatcher(newValue: string) {\n    this.editorMonacoInstance.updateOptions({ readOnly: newValue || this.disabled});\n  }\n\n  @Watch('language')\n  languageWatcher(newValue: string) {\n    window['monaco'].editor.setModelLanguage(this.editorMonacoInstance.getModel(), newValue);\n  }\n\n  @Watch('theme')\n  themeWatcher(newValue: string) {\n    window['monaco'].editor.setTheme(newValue);\n  }\n\n  @Watch('value')\n  valueWatcher(newValue: string) {\n    if (this.editorMonacoInstance.getValue() !== this.value) {\n      this.editorMonacoInstance.setValue(newValue);\n    }\n  }\n\n  @Method()\n  async getComponentId() {\n    return this.gid;\n  }\n\n  /**\n   * Sets focus on the native `input` in `goat-input`. Use this method instead of the global\n   * `input.focus()`.\n   */\n  @Method()\n  async setFocus() {\n    if (this.editorMonacoInstance) {\n      this.editorMonacoInstance.focus();\n    }\n  }\n\n  /**\n   * Sets blur on the native `input` in `goat-input`. Use this method instead of the global\n   * `input.blur()`.\n   */\n  @Method()\n  async setBlur() {\n    if (this.editorMonacoInstance) {\n      this.editorMonacoInstance.blur();\n    }\n  }\n\n  private editorElement?: HTMLElement;\n  @State() editorMonacoInstance: any;\n\n  async componentWillLoad() {\n    this.debounceChanged();\n    if (!window['monaco']) {\n      await loadMonaco();\n    }\n  }\n\n  componentDidLoad() {\n    setTimeout(() => this.initializeMonaco(), 1000);\n  }\n\n  private initializeMonaco() {\n    const monaco = window['monaco'];\n\n    //monaco.languages.typescript.javascriptDefaults.addExtraLib(this.extraLibs);\n\n    this.editorElement.innerHTML = '';\n\n    this.editorMonacoInstance = monaco.editor.create(this.editorElement, {\n      value: this.value,\n      lineNumbers: this.lineNumbers,\n      language: this.language,\n      theme: this.theme,\n      readOnly: this.disabled || this.readonly,\n    });\n\n\n    this.editorMonacoInstance.onDidChangeModelContent(() => {\n      this.value = this.editorMonacoInstance.getValue();\n      this.p4Change.emit({ value: this.value });\n    });\n\n    this.editorMonacoInstance.onDidFocusEditorText(() => {\n      this.hasFocus = true;\n    });\n\n    this.editorMonacoInstance.onDidBlurEditorText(() => {\n      this.hasFocus = false;\n    });\n  }\n\n  render() {\n    return (\n      <Host>\n        <div class={{\n          'component': true,\n          'code-editor-component': true,\n          [this.theme]: true,\n          'disabled': this.disabled,\n          'readonly': this.readonly,\n          'has-focus': this.hasFocus,\n        }}>\n          <div class='editor' ref={el => this.editorElement = el} />\n          {!this.editorMonacoInstance && <div class='code-editor-loader'>\n            <goat-spinner class='rainbow' />\n            Loading editor...\n          </div>}\n        </div>\n\n\n      </Host>\n    );\n  }\n\n}\n"]}