{"version":3,"sources":["src/components/form/input/input.scss?tag=goat-input&encapsulation=shadow","src/components/form/input/input.tsx"],"names":["inputCss","Input","[object Object]","hostRef","this","gid","getComponentIndex","name","value","size","state","type","disabled","readonly","required","clearable","debounce","autocomplete","configAria","startSlotHasContent","endSlotHasContent","hasFocus","inputHandler","ev","input","target","oldValue","goatInput","emit","goatChange","keyDownHandler","key","clearInput","blurHandler","goatBlur","focusHandler","goatFocus","evt","nativeInput","focus","blur","JSON","parse","debounceEvent","elm","hasAttribute","tabindex","getAttribute","undefined","removeAttribute","getAttributeNames","forEach","includes","querySelector","debounceChanged","toString","getValue","length","h","Host","has-focus","has-value","hasValue","class","input-container","start-slot-has-content","end-slot-has-content","Object","assign","ref","placeholder","onKeyDown","onInput","onBlur","onFocus","onClick","role"],"mappings":"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","sourcesContent":["@import \"../common-input\";\n\n","import {\n  Component,\n  ComponentInterface,\n  Element,\n  Event,\n  EventEmitter,\n  h,\n  Host,\n  Method,\n  Prop,\n  State,\n  Watch,\n} from '@stencil/core';\nimport { debounceEvent, getComponentIndex } from '../../../utils/utils';\n\n\n/**\n * @name Input\n * @description Enables native inputs to be used within a Form field.\n * @example <goat-input placeholder=\"Enter your name\"></goat-input>\n */\n@Component({\n  tag: 'goat-input',\n  styleUrl: 'input.scss',\n  shadow: true,\n})\nexport class Input implements ComponentInterface, InputComponentInterface {\n\n  gid: string = getComponentIndex();\n\n  /**\n   * The input field name.\n   */\n  @Prop() name: string = `goat-input-${this.gid}`;\n\n  /**\n   * The input field placeholder.\n   */\n  @Prop() placeholder: string;\n\n  /**\n   * The input field value.\n   */\n  @Prop({ mutable: true }) value?: string | number | null = '';\n\n  /**\n   * The input field size.\n   * Possible values are: `\"sm\"`, `\"md\"`, `\"lg\"`. Defaults to `\"md\"`.\n   */\n  @Prop({ reflect: true }) size: 'sm' | 'md' | 'lg' = 'md';\n\n  /**\n   * The input state.\n   * Possible values are: `\"success\"`, `\"error\"`, `\"warning\"`, 'default'. Defaults to `\"default\"`.\n   */\n  @Prop({ reflect: true }) state: 'success' | 'error' | 'warning' | 'default' = 'default';\n\n  /**\n   * The type of control to display.\n   * Possible values are: `\"text\"`, `\"password\"`, `\"number\"`, `\"email\"`, `\"tel\"`. Defaults to `\"text\"`.\n   */\n  @Prop() type: ('text' | 'password' | 'number' | 'email' | 'tel') = 'text';\n\n  /**\n   * If true, the user cannot interact with the button. Defaults to `false`.\n   */\n  @Prop({ reflect: true }) disabled: boolean = false;\n\n  /**\n   * If true, the user read the value cannot modify it. Defaults to `false`.\n   */\n  @Prop({ reflect: true }) readonly : boolean = false;\n\n  /**\n   * If true, required icon is show. Defaults to `false`.\n   */\n  @Prop({ reflect: true }) required: boolean = false;\n\n  /**\n   * If `true`, a clear icon will appear in the input when there is a value. Clicking it clears the input.\n   */\n  @Prop() clearable = false;\n\n  /**\n   * Set the amount of time, in milliseconds, to wait to trigger the `goatChange` event after each keystroke.\n   */\n  @Prop() debounce = 300;\n\n  /**\n   * Indicates whether the value of the control can be automatically completed by the browser.\n   */\n  @Prop() autocomplete: 'on' | 'off' = 'off';\n\n  @Prop({ reflect: true, mutable: true }) configAria: any = {};\n\n\n  /**\n   * Emitted when a keyboard input occurred.\n   */\n  @Event({ eventName: 'goat:input' }) goatInput: EventEmitter;\n\n  /**\n   * Emitted when the value has changed.\n   */\n  @Event({ eventName: 'goat:change' }) goatChange: EventEmitter;\n\n  /**\n   * Emitted when the input loses focus.\n   */\n  @Event({ eventName: 'goat:blur' }) goatBlur: EventEmitter;\n\n  /**\n   * Emitted when the input has focus.\n   */\n  @Event({ eventName: 'goat:focus' }) goatFocus: EventEmitter;\n\n\n  @Element() elm!: HTMLElement;\n  private nativeInput?: HTMLInputElement;\n  private tabindex?: string | number;\n\n  @State() startSlotHasContent = false;\n  @State() endSlotHasContent = false;\n  @State() hasFocus = false;\n\n  private inputHandler = (ev: Event) => {\n    const input = ev.target as HTMLInputElement | null;\n    const oldValue = this.value;\n    if (input) {\n      this.value = input.value;\n    }\n    this.goatInput.emit(ev as KeyboardEvent);\n    if (oldValue !== this.value) {\n      this.goatChange.emit(ev as KeyboardEvent);\n    }\n  };\n\n  private keyDownHandler = (ev: KeyboardEvent) => {\n    if (ev.key === 'Escape' && this.clearable) {\n      this.clearInput(ev);\n    }\n  };\n\n  private blurHandler = (ev: FocusEvent) => {\n    this.hasFocus = false;\n    this.goatBlur.emit(ev);\n  };\n\n  private focusHandler = (ev: FocusEvent) => {\n    this.hasFocus = true;\n    this.goatFocus.emit(ev);\n  };\n\n  private clearInput = (evt: Event) => {\n    this.nativeInput.value = '';\n    this.inputHandler(evt);\n  };\n\n  @Method()\n  async getComponentId() {\n    return this.gid;\n  }\n\n  /**\n   * Sets focus on the native `input` in `goat-input`. Use this method instead of the global\n   * `input.focus()`.\n   */\n  @Method()\n  async setFocus() {\n    if (this.nativeInput) {\n      this.nativeInput.focus();\n    }\n  }\n\n  /**\n   * Sets blur on the native `input` in `goat-input`. Use this method instead of the global\n   * `input.blur()`.\n   */\n  @Method()\n  async setBlur() {\n    if (this.nativeInput) {\n      this.nativeInput.blur();\n    }\n  }\n\n\n  /**\n   * Update the native input element when the value changes\n   */\n  @Watch('value')\n  protected valueChanged() {\n    let value = this.value;\n    if (this.type === 'number') {\n      if (value)\n        this.value = JSON.parse(value + '');\n    }\n  }\n\n\n  @Watch('debounce')\n  protected debounceChanged() {\n    this.goatChange = debounceEvent(this.goatChange, this.debounce);\n  }\n\n  componentWillLoad() {\n    // If the ion-input has a tabindex attribute we get the value\n    // and pass it down to the native input, then remove it from the\n    // goat-input to avoid causing tabbing twice on the same element\n    if (this.elm.hasAttribute('tabindex')) {\n      const tabindex = this.elm.getAttribute('tabindex');\n      this.tabindex = tabindex !== null ? tabindex : undefined;\n      this.elm.removeAttribute('tabindex');\n    }\n    this.elm.getAttributeNames().forEach((name: string) => {\n      if (name.includes('aria-')) {\n        this.configAria[name] = this.elm.getAttribute(name);\n        this.elm.removeAttribute(name);\n      }\n    });\n    this.startSlotHasContent = !!this.elm.querySelector('[slot=\"start\"]');\n    this.endSlotHasContent = !!this.elm.querySelector('[slot=\"end\"]');\n  }\n\n\n  connectedCallback() {\n    this.debounceChanged();\n  }\n\n  private getValue(): string {\n    return (this.value || '').toString();\n  }\n\n  private hasValue(): boolean {\n    return this.getValue().length > 0;\n  }\n\n\n  render() {\n\n    return (\n      <Host has-focus={this.hasFocus}\n            has-value={this.hasValue()}>\n        <div class={{\n          'input-container': true,\n          'disabled': this.disabled,\n          'has-focus': this.hasFocus,\n          'start-slot-has-content': this.startSlotHasContent,\n          'end-slot-has-content': this.endSlotHasContent,\n        }}>\n\n          <div class='slot-container start'>\n            <slot name='start' />\n          </div>\n\n          <input\n            class='input input-native'\n            name={this.name}\n            ref={input => this.nativeInput = input}\n            type={this.type}\n            placeholder={this.placeholder}\n            autocomplete={this.autocomplete}\n            value={this.value}\n            tabindex={this.tabindex}\n            readonly={this.readonly}\n            required={this.required}\n            onKeyDown={this.keyDownHandler}\n            onInput={this.inputHandler}\n            onBlur={this.blurHandler}\n            onFocus={this.focusHandler}\n            disabled={this.disabled}\n            {...this.configAria} />\n\n\n          {this.clearable && this.hasValue() &&\n            <goat-icon class='clear inherit input-action' name='x-circle-fill' size={this.size} onClick={this.clearInput} role=\"button\" />}\n\n          <div class='slot-container end'>\n            <slot name='end' />\n          </div>\n\n\n        </div>\n      </Host>\n    );\n  }\n\n}\n"]}