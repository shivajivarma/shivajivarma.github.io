{"version":3,"sources":["src/3d-party/prism/index.tsx","src/components/content/code-highlighter/code-highlighter.scss?tag=goat-code-highlighter&encapsulation=shadow","src/components/content/code-highlighter/code-highlighter.tsx"],"names":["PRISM_VERSION","async","loadPrism","loadScript","codeHighlighterCss","CodeHighlighter","[object Object]","hostRef","this","language","lineNumbers","value","compiledCode","parsedValue","renderPrism","window","setTimeout","str","replace","Prism","elm","innerHTML","decode","trim","formatted","highlight","languages","lineNumbersWrapper","linesNum","split","length","lines","Array","join","navigator","clipboard","writeText","alert","h","Host","class","line-numbers-wrapper","line-numbers","dir","size","variant","icon","aria-label","title","onGoat:click","handleCopyClick"],"mappings":"6FAEO,MAAMA,EAAgB,SAEtBC,eAAeC,UAEdC,EAAW,gDAAgDH,cCNnE,MAAMI,EAAqB,0vVCcdC,EAAe,MAL5BC,YAAAC,aAQUC,KAAAC,SAA2jD,aAE3jDD,KAAAE,YAAuB,MAEvBF,KAAAG,MAAgB,GAEfH,KAAAI,aAAuB,GAExBJ,KAAAK,YAAsB,GAG9BP,kBACEE,KAAKM,cAIPR,eACEE,KAAKM,cAMPR,0BACE,IAAKS,OAAO,SAAU,OACdb,KAIVI,mBACEU,YAAW,IAAMR,KAAKM,eAAe,KAGvCR,OAAOW,GACL,OAAOA,EAAIC,QAAQ,QAAS,KAAKA,QAAQ,QAAS,KAG5CZ,cAEN,MAAMa,EAAQJ,OAAO,SAErB,IAAIJ,EAAQH,KAAKG,MACjB,IAAKA,EAAO,CACVA,EAAQH,KAAKY,IAAIC,UAEnBV,EAAQH,KAAKc,OAAOX,GACpBH,KAAKK,YAAcF,EAAMY,OACzB,MAAMC,EAAYL,EAAMM,UAAUjB,KAAKK,YAAaM,EAAMO,UAAUlB,KAAKC,UAAWD,KAAKC,UACzF,IAAIkB,EAAqB,GACzB,GAAInB,KAAKE,YAAa,CACpB,MAAMkB,EAAWJ,EAAUK,MAAM,MAAMC,OACvC,MAAMC,EAAQ,IAAIC,MAAMJ,EAAW,GAAGK,KAAK,iBAC3CN,EAAqB,sDAAsDI,WAE7EvB,KAAKI,aAAeY,EAAYG,EAGlCrB,kBACES,OAAOmB,UAAUC,UAAUC,UAAU5B,KAAKK,aAC1CwB,MAAM,UAGR/B,SACE,OACEgC,EAACC,EAAI,KACF/B,KAAKI,cAAgB0B,EAAA,MAAA,CAAKE,MAAM,oBAC/BF,EAAA,MAAA,CAAKE,MAAM,kBACTF,EAAA,MAAA,CAAKE,MAAO,CAAEC,uBAAwB,KAAMC,eAAgBlC,KAAKE,cAC/D4B,EAAA,MAAA,CAAKK,IAAI,MAAMH,MAAM,2BAA2BnB,UAAWb,KAAKI,iBAGpE0B,EAAA,cAAA,CAAaE,MAAM,2BACNI,KAAK,KACLC,QAAQ,QACRC,KAAK,QAAOC,aACD,YACXC,MAAM,YAAWC,eAAe,KAC3CzC,KAAK0C,uBAGP1C,KAAKI,cAAgB0B,EAAA,MAAA,CAAKE,MAAM,eAChCF,EAAA,eAAA,CAAcE,MAAM,YAAY","sourcesContent":["import { loadScript } from '../../utils/utils';\n\nexport const PRISM_VERSION = '1.27.0';\n\nexport async function loadPrism() {\n  // @ts-ignore\n  await loadScript(`https://cdnjs.cloudflare.com/ajax/libs/prism/${PRISM_VERSION}/prism.js`);\n}\n","@import \"../../../3d-party/prism/prism\";\n@import \"../../../3d-party/prism/prism-line-numbers\";\n@import \"../../../globalStyles/commons\";\n\n\n:host {\n  display: block;\n  height: 100%;\n}\n\n.code-loader {\n  height: 20rem;\n  background-color: v(--field-01);\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  gap: v(--spacing-2);\n}\n\n.code-highlighter {\n  position: relative;\n  height: 100%;\n  background-color: v(--color-brand-primary-10);\n  padding: v(--spacing-3);\n  color: v(--text-primary);\n\n  .scroll-wrapper {\n    height: 100%;\n    overflow-y: auto;\n    .line-numbers-wrapper {\n      height: 100%;\n      position: relative;\n\n      &.line-numbers {\n        margin-left: 3.8rem;\n      }\n\n      @include font-style(text-sm);\n      .highlighter {\n        margin: 0;\n        padding: 0;\n      }\n    }\n  }\n\n  .copy-btn {\n    position: absolute;\n    top: v(--spacing-3);\n    right: v(--spacing-3);\n  }\n\n}\n\n\n:host-context([data-theme=\"dark\"]) .code-highlighter {\n  background-color: v(--color-brand-primary-100);\n}\n","import { Component, ComponentInterface, Element, h, Host, Prop, State, Watch } from '@stencil/core';\nimport {loadPrism} from '../../../3d-party/prism';\n\n\n/**\n * @name Code Highlighter\n * @description A browser based code highlighter.\n * @img /assets/img/code-highlighter.png\n */\n@Component({\n  tag: 'goat-code-highlighter',\n  styleUrl: 'code-highlighter.scss',\n  shadow: true,\n})\nexport class CodeHighlighter implements ComponentInterface {\n\n\n  @Prop() language: 'markup' | 'css' | 'clike' | 'javascript' | 'abap' | 'actionscript' | 'ada' | 'apacheconf' | 'apl' | 'applescript' | 'arduino' | 'arff' | 'asciidoc' | 'asm6502' | 'aspnet' | 'autohotkey' | 'autoit' | 'bash' | 'basic' | 'batch' | 'bison' | 'brainfuck' | 'bro' | 'c' | 'csharp' | 'cpp' | 'coffeescript' | 'clojure' | 'crystal' | 'csp' | 'css-extras' | 'd' | 'dart' | 'diff' | 'django' | 'docker' | 'eiffel' | 'elixir' | 'elm' | 'erb' | 'erlang' | 'fsharp' | 'flow' | 'fortran' | 'gedcom' | 'gherkin' | 'git' | 'glsl' | 'gml' | 'go' | 'graphql' | 'groovy' | 'haml' | 'handlebars' | 'haskell' | 'haxe' | 'http' | 'hpkp' | 'hsts' | 'ichigojam' | 'icon' | 'inform7' | 'ini' | 'io' | 'j' | 'java' | 'jolie' | 'json' | 'julia' | 'keyman' | 'kotlin' | 'latex' | 'less' | 'liquid' | 'lisp' | 'livescript' | 'lolcode' | 'lua' | 'makefile' | 'markdown' | 'markup-templating' | 'matlab' | 'mel' | 'mizar' | 'monkey' | 'n4js' | 'nasm' | 'nginx' | 'nim' | 'nix' | 'nsis' | 'objectivec' | 'ocaml' | 'opencl' | 'oz' | 'parigp' | 'parser' | 'pascal' | 'perl' | 'php' | 'php-extras' | 'plsql' | 'powershell' | 'processing' | 'prolog' | 'properties' | 'protobuf' | 'pug' | 'puppet' | 'pure' | 'python' | 'q' | 'qore' | 'r' | 'jsx' | 'tsx' | 'renpy' | 'reason' | 'rest' | 'rip' | 'roboconf' | 'ruby' | 'rust' | 'sas' | 'sass' | 'scss' | 'scala' | 'scheme' | 'smalltalk' | 'smarty' | 'sql' | 'soy' | 'stylus' | 'swift' | 'tap' | 'tcl' | 'textile' | 'tt2' | 'twig' | 'typescript' | 'vbnet' | 'velocity' | 'verilog' | 'vhdl' | 'vim' | 'visual-basic' | 'wasm' | 'wiki' | 'xeora' | 'xojo' | 'xquery' | 'yaml' = 'javascript';\n\n  @Prop() lineNumbers: boolean = false;\n\n  @Prop() value: string = '';\n\n  @State() compiledCode: string = '';\n\n  private parsedValue: string = '';\n\n  @Watch('language')\n  languageWatcher() {\n    this.renderPrism();\n  }\n\n  @Watch('lineNumbers')\n  themeWatcher() {\n    this.renderPrism();\n  }\n\n\n  @Element() elm!: HTMLElement;\n\n  async componentWillLoad() {\n    if (!window['Prism']) {\n      await loadPrism();\n    }\n  }\n\n  componentDidLoad() {\n    setTimeout(() => this.renderPrism(), 1000);\n  }\n\n  decode(str: string) {\n    return str.replace(/&lt;/g, '<').replace(/&gt;/g, '>');\n  }\n\n  private renderPrism() {\n    // @ts-ignore\n    const Prism = window['Prism'];\n\n    let value = this.value;\n    if (!value) {\n      value = this.elm.innerHTML;\n    }\n    value = this.decode(value);\n    this.parsedValue = value.trim();\n    const formatted = Prism.highlight(this.parsedValue, Prism.languages[this.language], this.language);\n    let lineNumbersWrapper = '';\n    if (this.lineNumbers) {\n      const linesNum = formatted.split('\\n').length;\n      const lines = new Array(linesNum + 1).join('<span></span>');\n      lineNumbersWrapper = `<span aria-hidden='true' class='line-numbers-rows'>${lines}</span>`;\n    }\n    this.compiledCode = formatted + lineNumbersWrapper;\n  }\n\n  handleCopyClick() {\n    window.navigator.clipboard.writeText(this.parsedValue);\n    alert('copied');\n  }\n\n  render() {\n    return (\n      <Host>\n        {this.compiledCode && <div class='code-highlighter'>\n          <div class='scroll-wrapper'>\n            <div class={{ 'line-numbers-wrapper': true, 'line-numbers': this.lineNumbers }}>\n              <pre dir='ltr' class='highlighter line-numbers' innerHTML={this.compiledCode} />\n            </div>\n          </div>\n          <goat-button class='copy-btn color-secondary'\n                       size='sm'\n                       variant='ghost'\n                       icon='files'\n                       aria-label='Copy code'\n                       title='Copy code' onGoat:click={() => {\n            this.handleCopyClick();\n          }} />\n        </div>}\n        {!this.compiledCode && <div class='code-loader'>\n          <goat-spinner class='rainbow' />\n          Loading code...\n        </div>}\n      </Host>\n    );\n  }\n\n}\n"]}