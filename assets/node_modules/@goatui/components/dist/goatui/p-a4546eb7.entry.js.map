{"version":3,"sources":["src/components/menu/dropdown/dropdown.scss?tag=goat-dropdown&encapsulation=shadow","src/components/menu/dropdown/dropdown.tsx"],"names":["dropdownCss","Dropdown","[object Object]","hostRef","this","size","isOpen","disabled","positions","items","hasFocus","openList","setTimeout","dropdownContent","elm","querySelector","dropdownContentHeight","getBoundingClientRect","height","dropdownContentWidth","width","fixPosition","toggleList","closeList","blurHandler","focusHandler","keyDownHandler","evt","$menuElm","getMenuElement","key","preventDefault","setFocus","path","composedPath","firstChild","children","isEventTriggerByElement","position","split","isMobile","i","length","dropdownButtonRect","dropdownContentRect","top","bottom","left","right","isOut","isOutOfViewport","any","h","class","map","item","value","tabindex","icon","name","slot","label","hint","Host","has-focus","is-open","dropdown","onKeyDown","onBlur","onFocus","onClick","renderItems"],"mappings":"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","sourcesContent":["@import \"../../../globalStyles/commons\";\n\n:host {\n  display: inline-block;\n  height: var(--dropdown-height, auto);\n}\n\n.dropdown {\n  position: relative;\n  height: var(--dropdown-height, auto);\n\n  .dropdown-button {\n    border: none;\n    background: none;\n    padding: 0;\n    margin: 0;\n    height: 100%;\n    width: 100%;\n\n    .slot-container {\n      height: 100%;\n    }\n  }\n\n  .dropdown-content {\n    z-index: v(--z-index-dropdown-content);\n    position: absolute;\n    width: max-content;\n    line-height: 0;\n    transform: scale(0);\n    transition: transform 0.1s ease-out 0s;\n  }\n\n\n  &.is-open {\n    .dropdown-content {\n      transform: scale(1);\n    }\n  }\n\n  &.bottom-right .dropdown-content {\n    top: calc(100% + #{v(--spacing-2)});\n    left: 0;\n    transform-origin: top;\n  }\n\n  &.bottom-left .dropdown-content {\n    top: calc(100% + #{v(--spacing-2)});\n    right: 0;\n    transform-origin: top;\n  }\n\n  &.top-right .dropdown-content {\n    bottom: calc(100% + #{v(--spacing-2)});\n    left: 0;\n    transform-origin: bottom;\n  }\n\n  &.top-left .dropdown-content {\n    bottom: calc(100% + #{v(--spacing-2)});\n    right: 0;\n    transform-origin: bottom;\n  }\n\n  &.center .dropdown-content {\n    top: 0;\n    left: 0;\n    position: fixed;\n    transform-origin: center;\n    display: flex;\n    align-items: center;\n    width: 100vw;\n    height: 100vh;\n    justify-content: center;\n    background: rgba(0, 0, 0, 0.5);\n    pointer-events: none;\n  }\n\n  .items {\n    min-width: 12rem;\n  }\n\n}\n\n:host([has-focus]) {\n  .dropdown {\n    outline: none;\n  }\n}\n","import { Component, ComponentInterface, Element, h, Host, Listen, Method, Prop, State } from '@stencil/core';\nimport { isEventTriggerByElement, isMobile, isOutOfViewport } from '../../../utils/utils';\n\n/**\n * @name Dropdown\n * @description Enables native inputs to be used within a Form field.\n * @img /assets/img/dropdown.png\n */\n@Component({\n  tag: 'goat-dropdown',\n  styleUrl: 'dropdown.scss',\n  shadow: true,\n})\nexport class Dropdown implements ComponentInterface {\n\n  /**\n   * The button size.\n   * Possible values are: `\"sm\"`, `\"md\"`, `\"lg\"`. Defaults to `\"md\"`.\n   */\n  @Prop() size: 'sm' | 'md' | 'lg' = 'md';\n\n  @Prop({ mutable: true }) isOpen: boolean = false;\n\n  /**\n   * If true, the user cannot interact with the button. Defaults to `false`.\n   */\n  @Prop() disabled: boolean = false;\n\n  @Prop() positions: string = 'bottom-right,top-right,bottom-left,top-left';\n\n  @Prop() items: any[] = null;\n\n  @Listen('click', { target: 'window' })\n  windowClick(evt) {\n    const path = (evt.path || evt.composedPath());\n    for (const elm of path) {\n      if (elm == this.elm)\n        return;\n    }\n    this.isOpen = false;\n  }\n\n  @Method()\n  async setFocus(elm?: HTMLElement) {\n    const firstChild = elm.children[0] || this.elm.children[0];\n    // @ts-ignore\n    if (firstChild.setFocus)\n      // @ts-ignore\n      firstChild.setFocus();\n  }\n\n  @Listen('goat:menu-item-click', { target: 'window' })\n  listenMenuItemClick(evt) {\n    if (isEventTriggerByElement(evt, this.elm)) {\n      this.closeList();\n    }\n    this.isOpen = false;\n  }\n\n  @Listen('goat:click', { target: 'window' })\n  listenClick(evt) {\n    if (isEventTriggerByElement(evt, this.elm)) {\n      this.closeList();\n    }\n    this.isOpen = false;\n  }\n\n  @Listen('keydown', { target: 'window' })\n  listenKeyDown(evt: KeyboardEvent) {\n    if (isEventTriggerByElement(evt, this.elm)) {\n      if (evt.key === 'Escape') {\n        this.closeList();\n      }\n    }\n  }\n\n  @Element() elm!: HTMLElement;\n  @State() hasFocus = false;\n  @State() position: string;\n  private dropdownContentHeight: any;\n  private dropdownContentWidth: any;\n\n  private closeList() {\n    if (!this.disabled && this.isOpen) {\n      this.isOpen = false;\n      setTimeout(() => {\n        this.setFocus(this.elm);\n      }, 100);\n    }\n  };\n\n  private openList = () => {\n    if (!this.disabled && !this.isOpen) {\n      this.isOpen = true;\n      setTimeout(() => {\n        const dropdownContent = this.elm.querySelector('[slot=\"dropdown-content\"]');\n        this.dropdownContentHeight = dropdownContent.getBoundingClientRect().height;\n        this.dropdownContentWidth = dropdownContent.getBoundingClientRect().width;\n        this.fixPosition();\n      }, 100);\n    }\n  };\n\n  componentWillLoad() {\n    if (this.positions)\n      this.position = this.positions.split(',')[0];\n  }\n\n  @Listen('scroll', { target: 'window' })\n  fixPosition() {\n    if (this.isOpen && this.dropdownContentHeight && this.dropdownContentWidth) {\n\n      if (isMobile()) {\n        this.position = 'center';\n        return;\n      }\n\n      const positions = this.positions.split(',');\n      for (let i = 0; i < positions.length; i++) {\n        const dropdownButtonRect: any = this.elm.getBoundingClientRect();\n        const dropdownContentRect: any = {};\n        if (positions[i] === 'bottom-right') {\n          dropdownContentRect.top = dropdownButtonRect.top + dropdownButtonRect.height;\n          dropdownContentRect.bottom = dropdownContentRect.top + this.dropdownContentHeight;\n          dropdownContentRect.left = dropdownButtonRect.left;\n          dropdownContentRect.right = dropdownButtonRect.left + this.dropdownContentWidth;\n        } else if (positions[i] === 'top-right') {\n          dropdownContentRect.top = dropdownButtonRect.top - this.dropdownContentHeight;\n          dropdownContentRect.bottom = dropdownButtonRect.top;\n          dropdownContentRect.left = dropdownButtonRect.left;\n          dropdownContentRect.right = dropdownButtonRect.left + this.dropdownContentWidth;\n        } else if (positions[i] === 'bottom-left') {\n          dropdownContentRect.top = dropdownButtonRect.top + dropdownButtonRect.height;\n          dropdownContentRect.bottom = dropdownContentRect.top + this.dropdownContentHeight;\n          dropdownContentRect.left = dropdownButtonRect.left - this.dropdownContentWidth;\n          dropdownContentRect.right = dropdownButtonRect.left;\n        } else if (positions[i] === 'top-left') {\n          dropdownContentRect.top = dropdownButtonRect.top - this.dropdownContentHeight;\n          dropdownContentRect.bottom = dropdownButtonRect.top;\n          dropdownContentRect.left = dropdownButtonRect.left - this.dropdownContentWidth;\n          dropdownContentRect.right = dropdownButtonRect.left;\n        }\n        const isOut = isOutOfViewport(dropdownContentRect);\n        if (!isOut.any) {\n          this.position = positions[i];\n          break;\n        }\n      }\n    }\n  };\n\n  private toggleList = () => {\n    if (this.isOpen)\n      this.closeList();\n    else\n      this.openList();\n  };\n\n  private blurHandler = () => {\n    this.hasFocus = false;\n  };\n\n  private focusHandler = () => {\n    this.hasFocus = true;\n  };\n\n  private keyDownHandler = (evt) => {\n    const $menuElm = this.getMenuElement();\n    if (evt.key === 'Enter') {\n      evt.preventDefault();\n      this.toggleList();\n    } else if (evt.key === 'ArrowDown') {\n      if (this.isOpen) {\n        evt.preventDefault();\n        $menuElm?.setFocus();\n      }\n    } else if (evt.key === 'ArrowUp') {\n      if (this.isOpen) {\n        evt.preventDefault();\n        $menuElm?.setFocus(); // focus on previous item\n      }\n    }\n  };\n\n  private getMenuElement() {\n    return this.elm.querySelector('goat-menu');\n  }\n\n  renderItems() {\n    if (this.items)\n      return <goat-menu class='items'>\n        {this.items.map((item) => {\n          return <goat-menu-item value={item.value} tabindex={this.isOpen ? '0' : '-1'}>\n            {item.icon && <goat-icon name={item.icon} slot='start' size='sm' />}\n            {item.label}\n            {item.hint && <span slot='end'>{item.hint}</span>}\n          </goat-menu-item>;\n        })}\n      </goat-menu>;\n  }\n\n  render() {\n    return (<Host has-focus={this.hasFocus} is-open={this.isOpen}>\n      <div class={{\n        'dropdown': true,\n        [this.position]: true,\n        'is-open': this.isOpen,\n      }}>\n        <button class='dropdown-button'\n                onKeyDown={this.keyDownHandler}\n                tabindex='-1'\n                onBlur={this.blurHandler}\n                onFocus={this.focusHandler}\n                disabled={this.disabled}\n                onClick={() => {\n                  this.toggleList();\n                }}>\n          <div class='slot-container'>\n            <slot />\n          </div>\n        </button>\n        <div class='dropdown-content'>\n          {this.renderItems()}\n          <slot name='dropdown-content' />\n        </div>\n      </div>\n    </Host>);\n  }\n\n}\n"]}