import { ComponentInterface, EventEmitter } from '../../../stencil-public-runtime';
/**
 * @name Button
 * @description An interactive button with a range of presentation options.
 * @example <goat-button>
 *   Button CTA
 *   </goat-button>
 */
export declare class Button implements ComponentInterface {
  gid: string;
  /**
   * Button size.
   * Possible values are `"sm"`, `"md"`, `"lg"`, `"xl"`, `"xxl"`. Defaults to `"md"`.
   */
  size: 'sm' | 'md' | 'lg' | 'xl' | 'xxl';
  variant: 'default' | 'light' | 'outline' | 'ghost' | 'link';
  /**
   * If true, fits button width to its parent width. Defaults to `false`.
   */
  block: boolean;
  /**
   * Button selection state.
   */
  selected: boolean;
  /**
   * If true, the user cannot interact with the button. Defaults to `false`.
   */
  disabled: boolean;
  disabledReason: string;
  /**
   * Icon which will displayed on button.
   * Possible values are bootstrap icon names.
   */
  icon: string;
  /**
   * Icon position.
   */
  iconEnd: boolean;
  /**
   * Show loader.
   */
  showLoader: boolean;
  /**
   * Hyperlink to navigate to on click.
   */
  href: string;
  configAria: any;
  /**
   * Sets or retrieves the window or frame at which to target content.
   */
  target: string;
  /**
   * On click of button, a CustomEvent 'goat:click' will be triggered.
   */
  goatClick: EventEmitter;
  hasFocus: boolean;
  isActive: boolean;
  slotHasContent: boolean;
  elm: HTMLElement;
  private tabindex?;
  private nativeInput?;
  windowMouseUp(): void;
  windowKeyUp(evt: any): void;
  setFocus(): Promise<void>;
  triggerClick(): Promise<void>;
  private getIconSize;
  private renderIcon;
  private clickHandler;
  private blurHandler;
  private focusHandler;
  private mouseDownHandler;
  private keyDownHandler;
  componentWillLoad(): void;
  private renderDisabledReason;
  render(): any;
}
