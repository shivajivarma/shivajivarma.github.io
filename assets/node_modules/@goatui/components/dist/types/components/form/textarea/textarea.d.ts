import { ComponentInterface, EventEmitter } from '../../../stencil-public-runtime';
/**
 * @name Textarea
 * @description Enables native inputs to be used within a Form field.
 * @example <goat-textarea placeholder="Enter some description over here"></goat-textarea>
 */
export declare class Textarea implements ComponentInterface, InputComponentInterface {
  gid: string;
  /**
   * The input field name.
   */
  name: string;
  /**
   * The input field placeholder.
   */
  placeholder: string;
  /**
   * The input field value.
   */
  value: string;
  /**
   * The button size.
   * Possible values are: `"sm"`, `"md"`, `"lg"`. Defaults to `"md"`.
   */
  size: 'sm' | 'md' | 'lg';
  /**
   * If true, the user cannot interact with the button. Defaults to `false`.
   */
  disabled: boolean;
  /**
   * If true, the user read the value cannot modify it. Defaults to `false`.
   */
  readonly: boolean;
  /**
   * The input state.
   * Possible values are: `"success"`, `"error"`, `"warning"`, 'default'. Defaults to `"default"`.
   */
  state: 'success' | 'error' | 'warning' | 'default';
  /**
   * If true, required icon is show. Defaults to `false`.
   */
  required: boolean;
  /**
   * Set the amount of time, in milliseconds, to wait to trigger the `goat:change` event after each keystroke.
   */
  debounce: number;
  /**
   * If `true`, a clear icon will appear in the input when there is a value. Clicking it clears the input.
   */
  clearable: boolean;
  configAria: any;
  /**
   * Emitted when a keyboard input occurred.
   */
  p4Input: EventEmitter;
  /**
   * Emitted when the value has changed..
   */
  p4Change: EventEmitter;
  /**
   * Emitted when the input loses focus.
   */
  p4Blur: EventEmitter;
  /**
   * Emitted when the input has focus.
   */
  p4Focus: EventEmitter;
  /**
   * Emitted when the action button is clicked.
   */
  p4ActionClick: EventEmitter;
  /**
   * Sets focus on the native `input` in `ion-input`. Use this method instead of the global
   * `input.focus()`.
   */
  setFocus(): Promise<void>;
  /**
   * Sets blur on the native `input` in `ion-input`. Use this method instead of the global
   * `input.blur()`.
   */
  setBlur(): Promise<void>;
  getComponentId(): Promise<string>;
  protected debounceChanged(): void;
  elm: HTMLElement;
  private nativeInput?;
  private tabindex?;
  hasFocus: boolean;
  endSlotHasContent: boolean;
  private inputHandler;
  private blurHandler;
  private focusHandler;
  private getValue;
  private hasValue;
  private clearInput;
  private keyDownHandler;
  componentWillLoad(): void;
  connectedCallback(): void;
  render(): any;
}
