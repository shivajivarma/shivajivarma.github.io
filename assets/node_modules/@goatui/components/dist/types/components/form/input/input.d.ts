import { ComponentInterface, EventEmitter } from '../../../stencil-public-runtime';
/**
 * @name Input
 * @description Enables native inputs to be used within a Form field.
 * @example <goat-input placeholder="Enter your name"></goat-input>
 */
export declare class Input implements ComponentInterface, InputComponentInterface {
  gid: string;
  /**
   * The input field name.
   */
  name: string;
  /**
   * The input field placeholder.
   */
  placeholder: string;
  /**
   * The input field value.
   */
  value?: string | number | null;
  /**
   * The input field size.
   * Possible values are: `"sm"`, `"md"`, `"lg"`. Defaults to `"md"`.
   */
  size: 'sm' | 'md' | 'lg';
  /**
   * The input state.
   * Possible values are: `"success"`, `"error"`, `"warning"`, 'default'. Defaults to `"default"`.
   */
  state: 'success' | 'error' | 'warning' | 'default';
  /**
   * The type of control to display.
   * Possible values are: `"text"`, `"password"`, `"number"`, `"email"`, `"tel"`. Defaults to `"text"`.
   */
  type: ('text' | 'password' | 'number' | 'email' | 'tel');
  /**
   * If true, the user cannot interact with the button. Defaults to `false`.
   */
  disabled: boolean;
  /**
   * If true, the user read the value cannot modify it. Defaults to `false`.
   */
  readonly: boolean;
  /**
   * If true, required icon is show. Defaults to `false`.
   */
  required: boolean;
  /**
   * If `true`, a clear icon will appear in the input when there is a value. Clicking it clears the input.
   */
  clearable: boolean;
  /**
   * Set the amount of time, in milliseconds, to wait to trigger the `goatChange` event after each keystroke.
   */
  debounce: number;
  /**
   * Indicates whether the value of the control can be automatically completed by the browser.
   */
  autocomplete: 'on' | 'off';
  configAria: any;
  /**
   * Emitted when a keyboard input occurred.
   */
  goatInput: EventEmitter;
  /**
   * Emitted when the value has changed.
   */
  goatChange: EventEmitter;
  /**
   * Emitted when the input loses focus.
   */
  goatBlur: EventEmitter;
  /**
   * Emitted when the input has focus.
   */
  goatFocus: EventEmitter;
  elm: HTMLElement;
  private nativeInput?;
  private tabindex?;
  startSlotHasContent: boolean;
  endSlotHasContent: boolean;
  hasFocus: boolean;
  private inputHandler;
  private keyDownHandler;
  private blurHandler;
  private focusHandler;
  private clearInput;
  getComponentId(): Promise<string>;
  /**
   * Sets focus on the native `input` in `goat-input`. Use this method instead of the global
   * `input.focus()`.
   */
  setFocus(): Promise<void>;
  /**
   * Sets blur on the native `input` in `goat-input`. Use this method instead of the global
   * `input.blur()`.
   */
  setBlur(): Promise<void>;
  /**
   * Update the native input element when the value changes
   */
  protected valueChanged(): void;
  protected debounceChanged(): void;
  componentWillLoad(): void;
  connectedCallback(): void;
  private getValue;
  private hasValue;
  render(): any;
}
