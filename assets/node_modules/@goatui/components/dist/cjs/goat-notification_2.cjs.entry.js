'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const index = require('./index-7441634b.js');
const utils = require('./utils-652ef10c.js');

const notificationCss = "*{box-sizing:border-box}:host{font-family:var(--font-family-base)}::selection{color:var(--color-white, #ffffff);background:var(--color-primary, var(--color-blue-60, #0f62fe))}::-webkit-scrollbar{width:1rem;height:1rem}::-webkit-scrollbar-track{background:#f1f1f1}::-webkit-scrollbar-thumb{background:#888}::-webkit-scrollbar-thumb :hover{background:#555}.sr-only{position:absolute;width:1px;height:1px;padding:0;margin:-1px;overflow:hidden;clip:rect(0, 0, 0, 0);border:0}.center-content{display:flex;align-items:center;justify-content:center}:host([hidden]){display:none}@keyframes reveal{0%{opacity:0;transform:translateY(8px)}}:host{display:block;margin-bottom:var(--spacing-3, 0.75rem)}.notification{border-style:solid;border-color:transparent;display:flex}.notification .state-icon{padding:var(--spacing-5, 1.25rem) var(--spacing-4, 1rem)}.notification .content{flex:1;padding:var(--spacing-4, 1rem) 0}.notification .content .title{font-size:var(--text-md-font-size, 1rem);line-height:var(--text-md-line-height, 1.5rem);letter-spacing:var(--text-md-letter-spacing, 0rem);font-weight:var(--font-weight-bold, 700)}.notification .content .subtitle{font-size:var(--text-sm-font-size, 0.875rem);line-height:var(--text-sm-line-height, 1.25rem);letter-spacing:var(--text-sm-letter-spacing, 0rem)}.notification .close-button{margin:0;padding:var(--spacing-3, 0.75rem)}:host(:not([dismissible])) .content{padding-inline-end:var(--spacing-4, 1rem)}:host([state=info]) .notification{border-left-color:var(--support-info-inverse, #4589ff);color:var(--text-inverse, #ffffff);background:var(--background-inverse, var(--color-gray-80, #393939));border-width:0 0 0 3px}:host([state=info]) .notification .close-button{--button-color:var(--text-inverse, #ffffff)}:host([state=info]) .notification .state-icon{color:var(--support-info-inverse, #4589ff)}:host([state=info]) .notification.low-contrast{color:var(--color-neutral-100);border-color:var(--support-info, #0043ce);background:var(--color-info-10, #edf5ff);border-width:1px 1px 1px 3px}:host([state=info]) .notification.low-contrast .close-button{--button-color:var(--color-neutral-100, var(--color-gray-100, #161616))}:host([state=info]) .notification.low-contrast .state-icon{color:var(--support-info, #0043ce)}:host([state=success]) .notification{border-left-color:var(--support-success-inverse, #42be65);color:var(--text-inverse, #ffffff);background:var(--background-inverse, var(--color-gray-80, #393939));border-width:0 0 0 3px}:host([state=success]) .notification .close-button{--button-color:var(--text-inverse, #ffffff)}:host([state=success]) .notification .state-icon{color:var(--support-success-inverse, #42be65)}:host([state=success]) .notification.low-contrast{color:var(--color-neutral-100);border-color:var(--support-success, #198038);background:var(--color-success-10, #defbe6);border-width:1px 1px 1px 3px}:host([state=success]) .notification.low-contrast .close-button{--button-color:var(--color-neutral-100, var(--color-gray-100, #161616))}:host([state=success]) .notification.low-contrast .state-icon{color:var(--support-success, #198038)}:host([state=warning]) .notification{border-left-color:var(--support-warning-inverse, #f1c21b);color:var(--text-inverse, #ffffff);background:var(--background-inverse, var(--color-gray-80, #393939));border-width:0 0 0 3px}:host([state=warning]) .notification .close-button{--button-color:var(--text-inverse, #ffffff)}:host([state=warning]) .notification .state-icon{color:var(--support-warning-inverse, #f1c21b)}:host([state=warning]) .notification.low-contrast{color:var(--color-neutral-100);border-color:var(--support-warning, #f1c21b);background:var(--color-warning-10, #fcf4d6);border-width:1px 1px 1px 3px}:host([state=warning]) .notification.low-contrast .close-button{--button-color:var(--color-neutral-100, var(--color-gray-100, #161616))}:host([state=warning]) .notification.low-contrast .state-icon{color:var(--support-warning, #f1c21b)}:host([state=error]) .notification{border-left-color:var(--support-error-inverse, #fa4d56);color:var(--text-inverse, #ffffff);background:var(--background-inverse, var(--color-gray-80, #393939));border-width:0 0 0 3px}:host([state=error]) .notification .close-button{--button-color:var(--text-inverse, #ffffff)}:host([state=error]) .notification .state-icon{color:var(--support-error-inverse, #fa4d56)}:host([state=error]) .notification.low-contrast{color:var(--color-neutral-100);border-color:var(--support-error, #da1e28);background:var(--color-error-10, #fff1f1);border-width:1px 1px 1px 3px}:host([state=error]) .notification.low-contrast .close-button{--button-color:var(--color-neutral-100, var(--color-gray-100, #161616))}:host([state=error]) .notification.low-contrast .state-icon{color:var(--support-error, #da1e28)}";

const Notification = class {
  constructor(hostRef) {
    index.registerInstance(this, hostRef);
    this.goatDismiss = index.createEvent(this, "goat:dismiss", 7);
    this.state = 'info';
    this.lowContrast = false;
    this.dismissible = false;
    this.actionable = true;
    this.actionName = 'dismiss';
    this.actionLabel = 'Dismiss';
    this.hidden = false;
    this.isDarkMode = utils.isDarkMode();
  }
  componentWillLoad() {
    utils.observeThemeChange(() => {
      this.isDarkMode = utils.isDarkMode();
    });
  }
  render() {
    return (index.h(index.Host, { state: this.state, hidden: this.hidden }, index.h("div", { class: { 'notification': true, 'low-contrast': this.lowContrast }, role: 'alert' }, index.h("div", { class: 'state-icon' }, this.renderStateIcon()), index.h("div", { class: 'content' }, index.h("div", { class: 'title' }, index.h("slot", { name: 'title' }), index.h("slot", null)), index.h("div", { class: 'subtitle' }, index.h("slot", { name: 'subtitle' }))), this.renderAction(), this.renderCloseButton())));
  }
  renderAction() {
    if (this.actionable)
      return (index.h("div", { class: 'action' }, index.h("slot", { name: 'action' })));
  }
  renderCloseButton() {
    if (this.dismissible) {
      return (index.h("div", { class: "close-button-container" }, index.h("goat-button", { class: { 'close-button': true }, "aria-label": 'Close alert', size: utils.ElementSize.SMALL, icon: 'x', variant: 'link', "onGoat:click": (evt) => {
          this.hidden = true;
          this.goatDismiss.emit(evt);
        } })));
    }
  }
  renderStateIcon() {
    if (this.state === 'success') {
      return index.h("goat-icon", { class: 'inherit', name: 'check-circle-fill', size: 'sm' });
    }
    else if (this.state === 'error') {
      return index.h("goat-icon", { class: 'inherit', name: 'x-circle-fill', size: 'sm' });
    }
    else if (this.state === 'info') {
      return index.h("goat-icon", { class: 'inherit', name: 'info-circle-fill', size: 'sm' });
    }
    else if (this.state === 'warning') {
      return index.h("goat-icon", { class: 'inherit', name: 'exclamation-circle-fill', size: 'sm' });
    }
  }
  get elm() { return index.getElement(this); }
};
Notification.style = notificationCss;

const toastCss = "*{box-sizing:border-box}:host{font-family:var(--font-family-base)}::selection{color:var(--color-white, #ffffff);background:var(--color-primary, var(--color-blue-60, #0f62fe))}::-webkit-scrollbar{width:1rem;height:1rem}::-webkit-scrollbar-track{background:#f1f1f1}::-webkit-scrollbar-thumb{background:#888}::-webkit-scrollbar-thumb :hover{background:#555}.sr-only{position:absolute;width:1px;height:1px;padding:0;margin:-1px;overflow:hidden;clip:rect(0, 0, 0, 0);border:0}.center-content{display:flex;align-items:center;justify-content:center}:host([hidden]){display:none}@keyframes reveal{0%{opacity:0;transform:translateY(8px)}}:host{display:inline-block;margin-bottom:var(--spacing-3, 0.75rem)}.toast{border-radius:var(--border-radius, 3px);display:flex;align-items:center;gap:var(--spacing-2, 0.5rem);padding:var(--spacing-2, 0.5rem) var(--spacing-4, 1rem);border:1px solid var(--ui-03, var(--color-gray-20, #e0e0e0));box-shadow:var(--shadow-lg, 0px 12px 16px -4px rgba(16, 24, 40, 0.08), 0px 4px 6px -2px rgba(16, 24, 40, 0.03));background-color:var(--background, #ffffff)}.toast .content{flex:1;color:var(--text-primary, var(--color-gray-100, #161616))}.toast .content .message{font-size:var(--text-md-font-size, 1rem);line-height:var(--text-md-line-height, 1.5rem);letter-spacing:var(--text-md-letter-spacing, 0rem)}.toast .content .description{font-size:var(--text-sm-font-size, 0.875rem);line-height:var(--text-sm-line-height, 1.25rem);letter-spacing:var(--text-sm-letter-spacing, 0rem)}.toast .state-icon{line-height:0}:host([state=info]) .state-icon{color:var(--color-info, #0f62fe)}:host([state=success]) .state-icon{color:var(--color-success, #198038)}:host([state=warning]) .state-icon{color:var(--color-warning, #8e6a00)}:host([state=error]) .state-icon{color:var(--color-error, #da1e28)}";

const Toast = class {
  constructor(hostRef) {
    index.registerInstance(this, hostRef);
    this.message = '';
    this.state = 'info';
    this.isDarkMode = utils.isDarkMode();
  }
  componentWillLoad() {
    utils.observeThemeChange(() => {
      this.isDarkMode = utils.isDarkMode();
    });
  }
  renderStateIcon() {
    if (this.state === 'success') {
      return index.h("goat-icon", { class: 'inherit', name: 'check-circle-fill', size: 'sm' });
    }
    else if (this.state === 'error') {
      return index.h("goat-icon", { class: 'inherit', name: 'x-circle-fill', size: 'sm' });
    }
    else if (this.state === 'info') {
      return index.h("goat-icon", { class: 'inherit', name: 'info-circle-fill', size: 'sm' });
    }
    else if (this.state === 'warning') {
      return index.h("goat-icon", { class: 'inherit', name: 'exclamation-circle-fill', size: 'sm' });
    }
  }
  render() {
    return (index.h(index.Host, null, index.h("div", { class: { 'toast': true, 'dark-mode': this.isDarkMode }, role: 'alert' }, index.h("div", { class: 'state-icon' }, this.renderStateIcon()), index.h("div", { class: 'content' }, index.h("div", { class: 'message' }, this.message)))));
  }
  get elm() { return index.getElement(this); }
};
Toast.style = toastCss;

exports.goat_notification = Notification;
exports.goat_toast = Toast;

//# sourceMappingURL=goat-notification_2.cjs.entry.js.map