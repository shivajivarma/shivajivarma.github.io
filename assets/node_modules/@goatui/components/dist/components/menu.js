import { proxyCustomElement, HTMLElement, h } from '@stencil/core/internal/client';
import { d as defineCustomElement$5 } from './button.js';
import { d as defineCustomElement$4 } from './empty-state.js';
import { d as defineCustomElement$3 } from './icon.js';
import { d as defineCustomElement$2 } from './spinner.js';
import { d as defineCustomElement$1 } from './svg.js';

const menuCss = "*{box-sizing:border-box}:host{font-family:var(--font-family-base)}::selection{color:var(--color-white, #ffffff);background:var(--color-primary, var(--color-blue-60, #0f62fe))}::-webkit-scrollbar{width:1rem;height:1rem}::-webkit-scrollbar-track{background:#f1f1f1}::-webkit-scrollbar-thumb{background:#888}::-webkit-scrollbar-thumb :hover{background:#555}.sr-only{position:absolute;width:1px;height:1px;padding:0;margin:-1px;overflow:hidden;clip:rect(0, 0, 0, 0);border:0}.center-content{display:flex;align-items:center;justify-content:center}:host([hidden]){display:none}@keyframes reveal{0%{opacity:0;transform:translateY(8px)}}:host{display:inline-block;--list-border-radius:var(--border-radius, 3px);--list-max-height:inherit}.menu{background-color:var(--field-02, #ffffff);padding:var(--spacing-2, 0.5rem) 0;border:1px solid var(--color-neutral-200, );box-sizing:border-box;border-radius:var(--list-border-radius);box-shadow:var(--shadow-sm, 0px 1px 3px rgba(16, 24, 40, 0.1), 0px 1px 2px rgba(16, 24, 40, 0.06))}";

const Menu = /*@__PURE__*/ proxyCustomElement(class extends HTMLElement {
  constructor() {
    super();
    this.__registerHost();
    this.__attachShadow();
    this.showLoader = false;
    this.empty = false;
    this.emptyState = {
      'headline': 'No items',
      'description': 'There are no items to display',
    };
  }
  parseEmptyState() {
    if (typeof this.emptyState === 'string') {
      this.internalEmptyState = JSON.parse(this.emptyState);
    }
  }
  handleKeyDown(evt) {
    const path = evt.composedPath();
    let menuItem = null;
    for (const elm of path) {
      // @ts-ignore
      if (elm.tagName === 'GOAT-MENU-ITEM') {
        menuItem = elm;
      }
      if (elm !== this.elm)
        continue;
      if (evt.key === 'ArrowDown') {
        evt.preventDefault();
        this.focusNextItem(menuItem);
      }
      else if (evt.key === 'ArrowUp') {
        evt.preventDefault();
        this.focusPreviousItem(menuItem);
      }
    }
  }
  /**
   * Sets focus on first menu item. Use this method instead of the global
   * `element.focus()`.
   */
  async setFocus() {
    const firstMenuItem = this.getFirstItem();
    firstMenuItem === null || firstMenuItem === void 0 ? void 0 : firstMenuItem.setFocus();
  }
  getFirstItem() {
    return this.elm.querySelector('goat-menu-item');
  }
  focusNextItem(currentItem) {
    let nextItem = currentItem.nextElementSibling;
    do {
      if (nextItem && nextItem.tagName === 'GOAT-MENU-ITEM' && !nextItem.disabled) {
        nextItem.setFocus();
        return;
      }
      if (!nextItem) {
        nextItem = this.elm.querySelector('goat-menu-item');
      }
      else {
        nextItem = nextItem.nextElementSibling;
      }
    } while (nextItem !== currentItem);
  }
  focusPreviousItem(currentItem) {
    let previousItem = currentItem.previousElementSibling;
    do {
      if (previousItem && previousItem.tagName === 'GOAT-MENU-ITEM' && !previousItem.disabled) {
        previousItem.setFocus();
        return;
      }
      if (!previousItem) {
        previousItem = this.elm.querySelector('goat-menu-item:last-child');
      }
      else {
        previousItem = previousItem.previousElementSibling;
      }
    } while (previousItem !== currentItem);
  }
  componentDidLoad() {
    this.parseEmptyState();
  }
  render() {
    return h("div", { class: 'menu' }, h("slot", null), this.renderEmptyState());
  }
  renderEmptyState() {
    if (this.empty)
      return h("goat-empty-state", Object.assign({ class: 'empty-menu' }, this.internalEmptyState));
  }
  get elm() { return this; }
  static get watchers() { return {
    "emptyState": ["parseEmptyState"]
  }; }
  static get style() { return menuCss; }
}, [1, "goat-menu", {
    "showLoader": [4, "show-loader"],
    "value": [1032],
    "empty": [1028],
    "emptyState": [1032, "empty-state"],
    "internalEmptyState": [32],
    "setFocus": [64]
  }, [[8, "keydown", "handleKeyDown"]]]);
function defineCustomElement() {
  if (typeof customElements === "undefined") {
    return;
  }
  const components = ["goat-menu", "goat-button", "goat-empty-state", "goat-icon", "goat-spinner", "goat-svg"];
  components.forEach(tagName => { switch (tagName) {
    case "goat-menu":
      if (!customElements.get(tagName)) {
        customElements.define(tagName, Menu);
      }
      break;
    case "goat-button":
      if (!customElements.get(tagName)) {
        defineCustomElement$5();
      }
      break;
    case "goat-empty-state":
      if (!customElements.get(tagName)) {
        defineCustomElement$4();
      }
      break;
    case "goat-icon":
      if (!customElements.get(tagName)) {
        defineCustomElement$3();
      }
      break;
    case "goat-spinner":
      if (!customElements.get(tagName)) {
        defineCustomElement$2();
      }
      break;
    case "goat-svg":
      if (!customElements.get(tagName)) {
        defineCustomElement$1();
      }
      break;
  } });
}

export { Menu as M, defineCustomElement as d };

//# sourceMappingURL=menu.js.map