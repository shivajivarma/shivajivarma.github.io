import { proxyCustomElement, HTMLElement, h, Host } from '@stencil/core/internal/client';
import { d as defineCustomElement$3 } from './link.js';
import { d as defineCustomElement$2 } from './text.js';

const breadcrumbItemCss = "*{box-sizing:border-box}:host{font-family:var(--font-family-base)}::selection{color:var(--color-white, #ffffff);background:var(--color-primary, var(--color-blue-60, #0f62fe))}::-webkit-scrollbar{width:1rem;height:1rem}::-webkit-scrollbar-track{background:#f1f1f1}::-webkit-scrollbar-thumb{background:#888}::-webkit-scrollbar-thumb :hover{background:#555}.sr-only{position:absolute;width:1px;height:1px;padding:0;margin:-1px;overflow:hidden;clip:rect(0, 0, 0, 0);border:0}.center-content{display:flex;align-items:center;justify-content:center}:host([hidden]){display:none}@keyframes reveal{0%{opacity:0;transform:translateY(8px)}}";

const BreadcrumbItem = /*@__PURE__*/ proxyCustomElement(class extends HTMLElement {
  constructor() {
    super();
    this.__registerHost();
    this.__attachShadow();
    this.active = false;
  }
  render() {
    return (h(Host, { itemprop: 'itemListElement', itemscope: true, itemtype: 'http://schema.org/ListItem' }, this.active ? h("goat-text", null, h("span", { itemProp: 'name' }, h("slot", null)), h("meta", { itemProp: 'position', content: this.position })) : h("goat-link", { itemprop: 'item', href: this.href, target: this.target }, h("span", { itemProp: 'name' }, h("slot", null)), h("meta", { itemProp: 'position', content: this.position }))));
  }
  static get style() { return breadcrumbItemCss; }
}, [1, "goat-breadcrumb-item", {
    "href": [1],
    "target": [1],
    "position": [513],
    "active": [516]
  }]);
function defineCustomElement$1() {
  if (typeof customElements === "undefined") {
    return;
  }
  const components = ["goat-breadcrumb-item", "goat-link", "goat-text"];
  components.forEach(tagName => { switch (tagName) {
    case "goat-breadcrumb-item":
      if (!customElements.get(tagName)) {
        customElements.define(tagName, BreadcrumbItem);
      }
      break;
    case "goat-link":
      if (!customElements.get(tagName)) {
        defineCustomElement$3();
      }
      break;
    case "goat-text":
      if (!customElements.get(tagName)) {
        defineCustomElement$2();
      }
      break;
  } });
}

const GoatBreadcrumbItem = BreadcrumbItem;
const defineCustomElement = defineCustomElement$1;

export { GoatBreadcrumbItem, defineCustomElement };

//# sourceMappingURL=goat-breadcrumb-item.js.map