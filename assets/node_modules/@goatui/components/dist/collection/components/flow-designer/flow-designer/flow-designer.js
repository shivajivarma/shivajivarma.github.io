import { Component, Element, h, Host, Listen, Prop, State } from '@stencil/core';
import { loadScript } from '../../../utils/utils';
function PX(unit) {
  return unit * 16;
}
/**
 * @name Flow Designer
 * @description An interactive button with a range of presentation options.
 * @example <goat-flow-designer>
 *   </goat-flow-designer>
 */
export class FlowDesigner {
  constructor() {
    this.blockSize = 10;
    this.activities = [];
    this.disabled = false;
    this.isMouseDown = false;
    this.activityHeight = 10;
    this.activityWidth = 5;
    this.lines = [];
  }
  handleMouseDown() {
    this.isMouseDown = false;
  }
  async componentWillLoad() {
    if (!window['SVG']) {
      await loadScript(`https://cdnjs.cloudflare.com/ajax/libs/svg.js/3.1.2/svg.min.js`);
    }
    this.lines = [{
        start: { x: 0, y: 0, gap: 8, direction: 'down' },
        end: { x: -15, y: 15, direction: 'top' },
        type: 'shape_connector',
      }, {
        start: { x: 0, y: 0, gap: 8, direction: 'down' },
        end: { x: 15, y: 15, direction: 'top' },
        type: 'shape_connector',
      }];
  }
  componentDidLoad() {
    setTimeout(() => {
      this.nativeScrollElm.scrollLeft = (this.canvasElm.clientWidth - this.nativeScrollElm.clientWidth) / 2;
      this.initializeCanvas();
    }, 100);
  }
  getViewBoxHeight() {
    return PX(this.blockSize * this.activityHeight);
  }
  getViewBoxWidth() {
    return PX(this.blockSize * this.activityWidth);
  }
  initializeCanvas() {
    //  const draw = (window['SVG']()).addTo(this.canvasElm).viewbox(0, 0, this.getViewBoxWidth(), this.getViewBoxHeight());
    // this.createActivityNode(1, 1).addTo(draw);
  }
  createStartNode() {
    const radius = PX(this.blockSize / 2);
    return (new window['SVG'].Circle())
      .radius(radius).move(0, 0)
      .attr({ fill: 'var(--color-success-100)' })
      .stroke({ color: 'var(--color-success-500)' });
  }
  createActivityNode(x, y) {
    const size = PX(this.blockSize / 2);
    /* var image = new window['SVG'].Image().load('https://cdn.img42.com/4b6f5e63ac50c95fe147052d8a4db676.jpeg');
     image.size(100, 100).move(20, 20);*/
    const centerOfRect = (size / 2);
    return (new window['SVG'].Rect())
      .addClass('activity')
      .size(size, size)
      .radius(15)
      .move((((this.activityWidth - 1) / 2 + x) * PX(this.blockSize)) + centerOfRect, ((y) * PX(this.blockSize)) + centerOfRect);
  }
  render() {
    return h(Host, { disabled: this.disabled },
      h("div", { class: 'flow-designer', ref: elm => this.nativeScrollElm = elm },
        h("div", { class: 'canvas-wrapper', onMouseDown: (event) => {
            event.preventDefault();
            this.isMouseDown = true;
            this.startX = event.pageX - this.nativeScrollElm.offsetLeft;
            this.startY = event.pageY - this.nativeScrollElm.offsetTop;
            this.scrollLeft = this.nativeScrollElm.scrollLeft;
            this.scrollTop = this.nativeScrollElm.scrollTop;
          }, onMouseLeave: (event) => {
            event.preventDefault();
            this.isMouseDown = false;
          }, onMouseMove: (event) => {
            event.preventDefault();
            if (!this.isMouseDown)
              return;
            const x = event.pageX - this.nativeScrollElm.offsetLeft;
            const walkX = (x - this.startX); //scroll-fast
            this.nativeScrollElm.scrollLeft = this.scrollLeft - walkX;
            const y = event.pageY - this.nativeScrollElm.offsetTop;
            const walkY = (y - this.startY); //scroll-fast
            this.nativeScrollElm.scrollTop = this.scrollTop - walkY;
          } },
          h("goat-canvas", { ref: elm => this.canvasElm = elm, class: 'flow-lines', lines: this.lines, padding: 0, viewbox: `0 0 124 134` }),
          h("div", { class: 'flow-items', style: { 'width': `${this.getViewBoxWidth()}px`, 'height': `${this.getViewBoxHeight()}px` } }))));
  }
  static get is() { return "goat-flow-designer"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() { return {
    "$": ["flow-designer.scss"]
  }; }
  static get styleUrls() { return {
    "$": ["flow-designer.css"]
  }; }
  static get properties() { return {
    "blockSize": {
      "type": "number",
      "mutable": false,
      "complexType": {
        "original": "number",
        "resolved": "number",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": ""
      },
      "attribute": "block-size",
      "reflect": false,
      "defaultValue": "10"
    },
    "activities": {
      "type": "unknown",
      "mutable": false,
      "complexType": {
        "original": "any[]",
        "resolved": "any[]",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": ""
      },
      "defaultValue": "[]"
    },
    "disabled": {
      "type": "boolean",
      "mutable": false,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": ""
      },
      "attribute": "disabled",
      "reflect": false,
      "defaultValue": "false"
    }
  }; }
  static get states() { return {
    "activityHeight": {},
    "activityWidth": {},
    "lines": {}
  }; }
  static get elementRef() { return "elm"; }
  static get listeners() { return [{
      "name": "mouseup",
      "method": "handleMouseDown",
      "target": undefined,
      "capture": false,
      "passive": false
    }]; }
}
//# sourceMappingURL=flow-designer.js.map