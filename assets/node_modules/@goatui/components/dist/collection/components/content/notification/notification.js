import { Component, Element, Event, h, Host, Prop, State } from '@stencil/core';
import { ElementSize, isDarkMode, observeThemeChange } from '../../../utils/utils';
/**
 * @name Notification
 * @description Notifications are messages that communicate information to the user.
 * @example <goat-notification state="success" low-contrast dismissible>
 *               <div slot='title'>Successful saved the record</div>
 *             </goat-notification>
 */
export class Notification {
  constructor() {
    this.state = 'info';
    this.lowContrast = false;
    this.dismissible = false;
    this.actionable = true;
    this.actionName = 'dismiss';
    this.actionLabel = 'Dismiss';
    this.hidden = false;
    this.isDarkMode = isDarkMode();
  }
  componentWillLoad() {
    observeThemeChange(() => {
      this.isDarkMode = isDarkMode();
    });
  }
  render() {
    return (h(Host, { state: this.state, hidden: this.hidden },
      h("div", { class: { 'notification': true, 'low-contrast': this.lowContrast }, role: 'alert' },
        h("div", { class: 'state-icon' }, this.renderStateIcon()),
        h("div", { class: 'content' },
          h("div", { class: 'title' },
            h("slot", { name: 'title' }),
            h("slot", null)),
          h("div", { class: 'subtitle' },
            h("slot", { name: 'subtitle' }))),
        this.renderAction(),
        this.renderCloseButton())));
  }
  renderAction() {
    if (this.actionable)
      return (h("div", { class: 'action' },
        h("slot", { name: 'action' })));
  }
  renderCloseButton() {
    if (this.dismissible) {
      return (h("div", { class: "close-button-container" },
        h("goat-button", { class: { 'close-button': true }, "aria-label": 'Close alert', size: ElementSize.SMALL, icon: 'x', variant: 'link', "onGoat:click": (evt) => {
            this.hidden = true;
            this.goatDismiss.emit(evt);
          } })));
    }
  }
  renderStateIcon() {
    if (this.state === 'success') {
      return h("goat-icon", { class: 'inherit', name: 'check-circle-fill', size: 'sm' });
    }
    else if (this.state === 'error') {
      return h("goat-icon", { class: 'inherit', name: 'x-circle-fill', size: 'sm' });
    }
    else if (this.state === 'info') {
      return h("goat-icon", { class: 'inherit', name: 'info-circle-fill', size: 'sm' });
    }
    else if (this.state === 'warning') {
      return h("goat-icon", { class: 'inherit', name: 'exclamation-circle-fill', size: 'sm' });
    }
  }
  static get is() { return "goat-notification"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() { return {
    "$": ["notification.scss"]
  }; }
  static get styleUrls() { return {
    "$": ["notification.css"]
  }; }
  static get properties() { return {
    "state": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "'success' | 'error' | 'info' | 'warning'",
        "resolved": "\"error\" | \"info\" | \"success\" | \"warning\"",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": ""
      },
      "attribute": "state",
      "reflect": false,
      "defaultValue": "'info'"
    },
    "lowContrast": {
      "type": "boolean",
      "mutable": false,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": ""
      },
      "attribute": "low-contrast",
      "reflect": false,
      "defaultValue": "false"
    },
    "dismissible": {
      "type": "boolean",
      "mutable": false,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": ""
      },
      "attribute": "dismissible",
      "reflect": false,
      "defaultValue": "false"
    },
    "actionable": {
      "type": "boolean",
      "mutable": false,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": ""
      },
      "attribute": "actionable",
      "reflect": false,
      "defaultValue": "true"
    },
    "actionName": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": ""
      },
      "attribute": "action-name",
      "reflect": false,
      "defaultValue": "'dismiss'"
    },
    "actionLabel": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": ""
      },
      "attribute": "action-label",
      "reflect": false,
      "defaultValue": "'Dismiss'"
    }
  }; }
  static get states() { return {
    "hidden": {},
    "isDarkMode": {}
  }; }
  static get events() { return [{
      "method": "goatDismiss",
      "name": "goat:dismiss",
      "bubbles": true,
      "cancelable": true,
      "composed": true,
      "docs": {
        "tags": [],
        "text": ""
      },
      "complexType": {
        "original": "any",
        "resolved": "any",
        "references": {}
      }
    }]; }
  static get elementRef() { return "elm"; }
}
//# sourceMappingURL=notification.js.map