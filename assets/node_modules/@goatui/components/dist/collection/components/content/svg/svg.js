import { Component, h, Host, Prop, State, Watch } from '@stencil/core';
import { fetchIcon } from './datasource';
export class Svg {
  constructor() {
    this.src = '';
    this.svg = '';
  }
  async fetchSvg(name) {
    if (this.src)
      this.svg = await fetchIcon(name);
  }
  async handleNameChange(newValue) {
    this.svg = await fetchIcon(newValue);
  }
  async componentWillLoad() {
    await this.fetchSvg(this.src);
  }
  render() {
    return (h(Host, null,
      h("div", { innerHTML: this.svg, class: { 'icon': true } })));
  }
  static get is() { return "goat-svg"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() { return {
    "$": ["svg.scss"]
  }; }
  static get styleUrls() { return {
    "$": ["svg.css"]
  }; }
  static get properties() { return {
    "src": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": ""
      },
      "attribute": "src",
      "reflect": false,
      "defaultValue": "''"
    }
  }; }
  static get states() { return {
    "svg": {}
  }; }
  static get watchers() { return [{
      "propName": "src",
      "methodName": "handleNameChange"
    }]; }
}
//# sourceMappingURL=svg.js.map