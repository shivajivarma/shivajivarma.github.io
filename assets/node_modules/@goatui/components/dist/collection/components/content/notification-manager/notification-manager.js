import { Component, Element, h, Host, Listen, Prop, State } from '@stencil/core';
import { isDarkMode, observeThemeChange } from '../../../utils/utils';
const getNotificationIndex = (() => {
  let counter = 1;
  return (function () {
    return `${counter++}`;
  });
})();
/**
 * @name Notification Manager
 * @description Manages alert, toasts and notifications.
 * @img /assets/img/notification-manager.png
 */
export class NotificationManager {
  constructor() {
    this.name = 'global';
    this.position = 'bottom-right';
    this.notifications = [];
    this.isDarkMode = isDarkMode();
  }
  listenToast(evt) {
    if ((evt.detail.target === this.name || this.name === 'global') && !evt.detail.procced) {
      evt.preventDefault();
      evt.stopPropagation();
      evt.detail.procced = true;
      const notification = {
        id: getNotificationIndex(),
        type: 'toast',
        message: evt.detail.message,
        state: evt.detail.state,
        hide: false,
      };
      this.notifications = this.notifications.concat([notification]).filter(n => !n.hide);
      setTimeout(() => {
        notification.hide = true;
        this.notifications = [...this.notifications];
      }, 5000);
    }
  }
  listenNotification(evt) {
    if ((evt.detail.target === this.name || this.name === 'global') && !evt.detail.procced) {
      evt.preventDefault();
      evt.stopPropagation();
      evt.detail.procced = true;
      const notification = {
        id: getNotificationIndex(),
        type: 'notification',
        title: evt.detail.title,
        subtitle: evt.detail.subtitle,
        messageType: evt.detail.messageType,
        state: evt.detail.state,
        hide: false,
      };
      this.notifications = this.notifications.concat([notification]).filter(n => !n.hide);
      setTimeout(() => {
        notification.hide = true;
        this.notifications = [...this.notifications];
      }, 5000);
    }
  }
  componentWillLoad() {
    observeThemeChange(() => {
      this.isDarkMode = isDarkMode();
    });
  }
  renderNotification(notification) {
    if (notification.type) {
      switch (notification.type) {
        case 'toast':
          return (h("goat-toast", { id: `${notification.id}`, state: notification.state, message: notification.message }));
        case 'alert':
          return (h("goat-alert", Object.assign({}, notification.props)));
        case 'notification':
          return (h("goat-notification", { id: `${notification.id}`, state: notification.state },
            h("div", { innerHTML: notification.title, slot: "title" }),
            h("div", { innerHTML: notification.subtitle, slot: "subtitle" })));
        default:
          return null;
      }
    }
  }
  render() {
    return (h(Host, null,
      h("div", { class: { 'notification-manager': true, [`position-${this.position}`]: true } }, this.notifications.map((notification) => (h("div", { class: { 'notification': true, 'hidden': notification.hide } }, this.renderNotification(notification)))))));
  }
  static get is() { return "goat-notification-manager"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() { return {
    "$": ["notification-manager.scss"]
  }; }
  static get styleUrls() { return {
    "$": ["notification-manager.css"]
  }; }
  static get properties() { return {
    "name": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": ""
      },
      "attribute": "name",
      "reflect": true,
      "defaultValue": "'global'"
    },
    "position": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "'top-right' | 'top-left' | 'bottom-right' | 'bottom-left'",
        "resolved": "\"bottom-left\" | \"bottom-right\" | \"top-left\" | \"top-right\"",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": ""
      },
      "attribute": "position",
      "reflect": false,
      "defaultValue": "'bottom-right'"
    }
  }; }
  static get states() { return {
    "notifications": {},
    "isDarkMode": {}
  }; }
  static get elementRef() { return "elm"; }
  static get listeners() { return [{
      "name": "goat:toast",
      "method": "listenToast",
      "target": "window",
      "capture": false,
      "passive": false
    }, {
      "name": "goat:notification",
      "method": "listenNotification",
      "target": "window",
      "capture": false,
      "passive": false
    }]; }
}
//# sourceMappingURL=notification-manager.js.map