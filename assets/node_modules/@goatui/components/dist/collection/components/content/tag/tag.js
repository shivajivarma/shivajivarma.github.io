import { Component, Element, Event, h, Host, Prop } from '@stencil/core';
/**
 * @name Tag
 * @description Use tags to label, categorize, or organize items using keywords that describe them.
 * @example <goat-tag class="color-red">Important</goat-tag>
 */
export class Tag {
  constructor() {
    /**
     * Text size.
     */
    this.size = 'md';
    this.filter = false;
    this.value = '';
    this.dismissClickHandler = () => {
      this.goatTagDismissClick.emit({ value: this.value || this.elm.textContent });
    };
  }
  renderCloseButton() {
    if (!this.filter) {
      return;
    }
    const size = this.size === 'md' ? '24px' : '16px';
    return h("button", { class: 'close-btn', onClick: () => this.dismissClickHandler() },
      h("goat-icon", { class: 'close-btn-icon inherit', name: 'x', size: size }));
  }
  render() {
    return (h(Host, null,
      h("div", { class: { 'tag': true, [`size-${this.size}`]: true } },
        h("div", { class: 'tag-content' },
          h("slot", null)),
        this.renderCloseButton())));
  }
  static get is() { return "goat-tag"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() { return {
    "$": ["tag.scss"]
  }; }
  static get styleUrls() { return {
    "$": ["tag.css"]
  }; }
  static get properties() { return {
    "size": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "'sm' | 'md'",
        "resolved": "\"md\" | \"sm\"",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Text size."
      },
      "attribute": "size",
      "reflect": true,
      "defaultValue": "'md'"
    },
    "filter": {
      "type": "boolean",
      "mutable": false,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": ""
      },
      "attribute": "filter",
      "reflect": true,
      "defaultValue": "false"
    },
    "value": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": ""
      },
      "attribute": "value",
      "reflect": true,
      "defaultValue": "''"
    }
  }; }
  static get events() { return [{
      "method": "goatClick",
      "name": "goat:click",
      "bubbles": true,
      "cancelable": true,
      "composed": true,
      "docs": {
        "tags": [],
        "text": ""
      },
      "complexType": {
        "original": "any",
        "resolved": "any",
        "references": {}
      }
    }, {
      "method": "goatTagDismissClick",
      "name": "goat:tag-dismiss",
      "bubbles": true,
      "cancelable": true,
      "composed": true,
      "docs": {
        "tags": [],
        "text": ""
      },
      "complexType": {
        "original": "any",
        "resolved": "any",
        "references": {}
      }
    }]; }
  static get elementRef() { return "elm"; }
}
//# sourceMappingURL=tag.js.map