import { Component, h, Host, Prop, State, Watch } from '@stencil/core';
import { fetchIcon } from './datasource';
/**
 * @name Icon
 * @description Renders a specified icon.
 * @example <goat-icon name="house"></goat-icon>
 */
export class Icon {
  constructor() {
    /**
     * The Icon size.
     * Possible values are: `"sm"`, `"md"`, `"lg"`, `"xl"` and size in pixel. Defaults to `"md"`.
     */
    this.size = 'md';
    this.svg = '';
  }
  async fetchSvg(name) {
    if (this.name)
      this.svg = await fetchIcon(name);
  }
  async handleNameChange(newValue) {
    this.svg = await fetchIcon(newValue);
  }
  async componentWillLoad() {
    await this.fetchSvg(this.name);
  }
  getSize() {
    let size;
    if (this.size === 'sm')
      size = '1.25rem';
    else if (!this.size || this.size === 'md')
      size = '1.5rem';
    else if (this.size === 'lg')
      size = '1.75rem';
    else if (this.size === 'xl')
      size = '2rem';
    else
      size = this.size;
    return size;
  }
  render() {
    const icon = this.svg.replace(/width="([^"]+)"/, 'width="' + this.getSize() + '"').replace(/height="([^"]+)"/, 'height="' + this.getSize() + '"');
    return (h(Host, null,
      h("div", { innerHTML: icon, class: { 'icon': true } })));
  }
  static get is() { return "goat-icon"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() { return {
    "$": ["icon.scss"]
  }; }
  static get styleUrls() { return {
    "$": ["icon.css"]
  }; }
  static get properties() { return {
    "name": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": ""
      },
      "attribute": "name",
      "reflect": true
    },
    "size": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "'sm' | 'md' | 'lg' | 'xl' | string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "The Icon size.\nPossible values are: `\"sm\"`, `\"md\"`, `\"lg\"`, `\"xl\"` and size in pixel. Defaults to `\"md\"`."
      },
      "attribute": "size",
      "reflect": true,
      "defaultValue": "'md'"
    }
  }; }
  static get states() { return {
    "svg": {}
  }; }
  static get watchers() { return [{
      "propName": "name",
      "methodName": "handleNameChange"
    }]; }
}
//# sourceMappingURL=icon.js.map