{"version":3,"file":"toast.js","sourceRoot":"","sources":["../../../../src/components/content/toast/toast.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAsB,OAAO,EAAE,CAAC,EAAE,IAAI,EAAE,IAAI,EAAE,KAAK,EAAE,MAAM,eAAe,CAAC;AAC7F,OAAO,EAAE,UAAU,EAAE,kBAAkB,EAAE,MAAM,sBAAsB,CAAC;AAGtE;;;;GAIG;AAMH,MAAM,OAAO,KAAK;EALlB;IASU,YAAO,GAAW,EAAE,CAAC;IAEJ,UAAK,GAA6C,MAAM,CAAC;IAEzE,eAAU,GAAY,UAAU,EAAE,CAAC;GAqC7C;EAnCC,iBAAiB;IACf,kBAAkB,CAAC,GAAG,EAAE;MACtB,IAAI,CAAC,UAAU,GAAG,UAAU,EAAE,CAAC;IACjC,CAAC,CAAC,CAAC;EACL,CAAC;EAED,eAAe;IACb,IAAI,IAAI,CAAC,KAAK,KAAK,SAAS,EAAE;MAC5B,OAAO,iBAAW,KAAK,EAAC,SAAS,EAAC,IAAI,EAAC,mBAAmB,EAAC,IAAI,EAAC,IAAI,GAAG,CAAC;KACzE;SAAM,IAAI,IAAI,CAAC,KAAK,KAAK,OAAO,EAAE;MACjC,OAAO,iBAAW,KAAK,EAAC,SAAS,EAAC,IAAI,EAAC,eAAe,EAAC,IAAI,EAAC,IAAI,GAAG,CAAC;KACrE;SAAM,IAAI,IAAI,CAAC,KAAK,KAAK,MAAM,EAAE;MAChC,OAAO,iBAAW,KAAK,EAAC,SAAS,EAAC,IAAI,EAAC,kBAAkB,EAAC,IAAI,EAAC,IAAI,GAAG,CAAC;KACxE;SAAM,IAAI,IAAI,CAAC,KAAK,KAAK,SAAS,EAAE;MACnC,OAAO,iBAAW,KAAK,EAAC,SAAS,EAAC,IAAI,EAAC,yBAAyB,EAAC,IAAI,EAAC,IAAI,GAAG,CAAC;KAC/E;EACH,CAAC;EAED,MAAM;IACJ,OAAO,CACL,EAAC,IAAI;MACH,WAAK,KAAK,EAAE,EAAE,OAAO,EAAE,IAAI,EAAE,WAAW,EAAE,IAAI,CAAC,UAAU,EAAE,EAAE,IAAI,EAAC,OAAO;QACvE,WAAK,KAAK,EAAC,YAAY,IACpB,IAAI,CAAC,eAAe,EAAE,CACnB;QACN,WAAK,KAAK,EAAC,SAAS;UAClB,WAAK,KAAK,EAAC,SAAS,IACjB,IAAI,CAAC,OAAO,CACT,CACF,CACF,CACD,CACR,CAAC;EACJ,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAEF","sourcesContent":["import { Component, ComponentInterface, Element, h, Host, Prop, State } from '@stencil/core';\nimport { isDarkMode, observeThemeChange } from '../../../utils/utils';\n\n\n/**\n * @name Toast\n * @description Toasts are lightweight notifications.\n * @example <goat-toast state=\"success\" message=\"Successful saved the record\"></goat-toast>\n */\n@Component({\n  tag: 'goat-toast',\n  styleUrl: 'toast.scss',\n  shadow: true,\n})\nexport class Toast implements ComponentInterface {\n\n  @Element() elm!: HTMLElement;\n\n  @Prop() message: string = '';\n\n  @Prop({ reflect: true }) state: 'success' | 'error' | 'info' | 'warning' = 'info';\n\n  @State() isDarkMode: boolean = isDarkMode();\n\n  componentWillLoad() {\n    observeThemeChange(() => {\n      this.isDarkMode = isDarkMode();\n    });\n  }\n\n  renderStateIcon() {\n    if (this.state === 'success') {\n      return <goat-icon class='inherit' name='check-circle-fill' size='sm' />;\n    } else if (this.state === 'error') {\n      return <goat-icon class='inherit' name='x-circle-fill' size='sm' />;\n    } else if (this.state === 'info') {\n      return <goat-icon class='inherit' name='info-circle-fill' size='sm' />;\n    } else if (this.state === 'warning') {\n      return <goat-icon class='inherit' name='exclamation-circle-fill' size='sm' />;\n    }\n  }\n\n  render() {\n    return (\n      <Host>\n        <div class={{ 'toast': true, 'dark-mode': this.isDarkMode }} role='alert'>\n          <div class='state-icon'>\n            {this.renderStateIcon()}\n          </div>\n          <div class='content'>\n            <div class='message'>\n              {this.message}\n            </div>\n          </div>\n        </div>\n      </Host>\n    );\n  }\n\n}\n"]}