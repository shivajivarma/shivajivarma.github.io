{"version":3,"file":"textarea.js","sourceRoot":"","sources":["../../../../src/components/form/textarea/textarea.tsx"],"names":[],"mappings":"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","sourcesContent":["import {\n  Component,\n  ComponentInterface,\n  Element,\n  Event,\n  EventEmitter,\n  h,\n  Host,\n  Method,\n  Prop,\n  State,\n  Watch,\n} from '@stencil/core';\nimport { debounceEvent, getComponentIndex } from '../../../utils/utils';\n\n/**\n * @name Textarea\n * @description Enables native inputs to be used within a Form field.\n * @example <goat-textarea placeholder=\"Enter some description over here\"></goat-textarea>\n */\n@Component({\n  tag: 'goat-textarea',\n  styleUrl: 'textarea.scss',\n  shadow: true,\n})\nexport class Textarea implements ComponentInterface, InputComponentInterface {\n\n  gid: string = getComponentIndex();\n\n  /**\n   * The input field name.\n   */\n  @Prop() name: string = `goat-input-${this.gid}`;\n\n  /**\n   * The input field placeholder.\n   */\n  @Prop() placeholder: string;\n\n  /**\n   * The input field value.\n   */\n  @Prop({ mutable: true }) value: string;\n\n  /**\n   * The button size.\n   * Possible values are: `\"sm\"`, `\"md\"`, `\"lg\"`. Defaults to `\"md\"`.\n   */\n  @Prop( {reflect: true}) size: 'sm' | 'md' | 'lg' = 'md';\n\n  /**\n   * If true, the user cannot interact with the button. Defaults to `false`.\n   */\n  @Prop({reflect: true}) disabled: boolean = false;\n\n  /**\n   * If true, the user read the value cannot modify it. Defaults to `false`.\n   */\n  @Prop({ reflect: true }) readonly : boolean = false;\n\n\n  /**\n   * The input state.\n   * Possible values are: `\"success\"`, `\"error\"`, `\"warning\"`, 'default'. Defaults to `\"default\"`.\n   */\n  @Prop({ reflect: true }) state: 'success' | 'error' | 'warning' | 'default' = 'default';\n\n\n  /**\n   * If true, required icon is show. Defaults to `false`.\n   */\n  @Prop() required: boolean = false;\n\n\n  /**\n   * Set the amount of time, in milliseconds, to wait to trigger the `goat:change` event after each keystroke.\n   */\n  @Prop() debounce = 300;\n\n  /**\n   * If `true`, a clear icon will appear in the input when there is a value. Clicking it clears the input.\n   */\n  @Prop() clearable = false;\n\n\n  @Prop( {reflect: true, mutable: true}) configAria: any = {};\n\n\n  /**\n   * Emitted when a keyboard input occurred.\n   */\n  @Event({ eventName: 'goat:input' }) p4Input: EventEmitter;\n\n  /**\n   * Emitted when the value has changed..\n   */\n  @Event({ eventName: 'goat:change' }) p4Change: EventEmitter;\n\n  /**\n   * Emitted when the input loses focus.\n   */\n  @Event({ eventName: 'goat:blur' }) p4Blur: EventEmitter;\n\n  /**\n   * Emitted when the input has focus.\n   */\n  @Event({ eventName: 'goat:focus' }) p4Focus: EventEmitter;\n\n  /**\n   * Emitted when the action button is clicked.\n   */\n  @Event({ eventName: 'goat:action-click' }) p4ActionClick: EventEmitter;\n\n  /**\n   * Sets focus on the native `input` in `ion-input`. Use this method instead of the global\n   * `input.focus()`.\n   */\n  @Method()\n  async setFocus() {\n    if (this.nativeInput) {\n      this.nativeInput.focus();\n    }\n  }\n\n  /**\n   * Sets blur on the native `input` in `ion-input`. Use this method instead of the global\n   * `input.blur()`.\n   */\n  @Method()\n  async setBlur() {\n    if (this.nativeInput) {\n      this.nativeInput.blur();\n    }\n  }\n\n  @Method()\n  async getComponentId() {\n    return this.gid;\n  }\n\n  @Watch('debounce')\n  protected debounceChanged() {\n    this.p4Change = debounceEvent(this.p4Change, this.debounce);\n  }\n\n\n  @Element() elm!: HTMLElement;\n  private nativeInput?: HTMLTextAreaElement;\n  private tabindex?: string | number;\n  @State() hasFocus = false;\n  @State() endSlotHasContent = false;\n\n\n  private inputHandler = (ev: Event) => {\n    const input = ev.target as HTMLInputElement | null;\n    if (input) {\n      this.value = input.value || '';\n    }\n    this.p4Input.emit(ev as KeyboardEvent);\n    this.p4Change.emit(ev as KeyboardEvent);\n  };\n\n  private blurHandler = (ev: FocusEvent) => {\n    this.hasFocus = false;\n    this.p4Blur.emit(ev);\n  };\n\n  private focusHandler = (ev: FocusEvent) => {\n    this.hasFocus = true;\n    this.p4Focus.emit(ev);\n  };\n\n\n  private getValue(): string {\n    return (this.value || '').toString();\n  }\n\n  private hasValue(): boolean {\n    return this.getValue().length > 0;\n  }\n\n  private clearInput = (evt: Event) => {\n    this.nativeInput.value = '';\n    this.inputHandler(evt);\n  };\n\n  private keyDownHandler = (ev: KeyboardEvent) => {\n    if (ev.key === 'Escape' && this.clearable) {\n      this.clearInput(ev);\n    }\n  };\n\n  componentWillLoad() {\n    // If the ion-input has a tabindex attribute we get the value\n    // and pass it down to the native input, then remove it from the\n    // ion-input to avoid causing tabbing twice on the same element\n    if (this.elm.hasAttribute('tabindex')) {\n      const tabindex = this.elm.getAttribute('tabindex');\n      this.tabindex = tabindex !== null ? tabindex : undefined;\n      this.elm.removeAttribute('tabindex');\n    }\n    this.elm.getAttributeNames().forEach((name: string) => {\n      if (name.includes('aria-')) {\n        this.configAria[name] = this.elm.getAttribute(name);\n        this.elm.removeAttribute(name);\n      }\n    });\n    this.endSlotHasContent = !!this.elm.querySelector('[slot=\"end\"]');\n  }\n\n  connectedCallback() {\n    this.debounceChanged();\n  }\n\n  render() {\n    return (\n      <Host has-focus={this.hasFocus} has-value={this.hasValue()}>\n        <div class={{\n          'input-container': true,\n          'textarea': true,\n          'disabled': this.disabled,\n          'readonly': this.readonly,\n          'has-focus': this.hasFocus,\n          'end-slot-has-content': this.endSlotHasContent,\n        }}>\n             <textarea\n               rows={4}\n               ref={input => this.nativeInput = input}\n               required={this.required}\n               class='input input-native'\n               name={this.name}\n               placeholder={this.placeholder}\n               value={this.value}\n               tabindex={this.tabindex}\n               onKeyDown={this.keyDownHandler}\n               onInput={this.inputHandler}\n               onBlur={this.blurHandler}\n               onFocus={this.focusHandler}\n               disabled={this.disabled}\n               {...this.configAria}/>\n\n          {this.clearable && this.hasValue() &&\n            <goat-icon class='clear inherit input-action' name='x-circle-fill' onClick={this.clearInput} />}\n\n          <div class='slot-container end'>\n            <slot name='end' />\n          </div>\n        </div>\n      </Host>\n    );\n  }\n\n}\n"]}