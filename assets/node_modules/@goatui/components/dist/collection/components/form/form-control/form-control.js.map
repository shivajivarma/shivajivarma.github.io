{"version":3,"file":"form-control.js","sourceRoot":"","sources":["../../../../src/components/form/form-control/form-control.tsx"],"names":[],"mappings":"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","sourcesContent":["import { Component, ComponentInterface, Element, h, Host, Prop } from '@stencil/core';\n\n/**\n * @name Form Control\n * @description The Form Control component adds a label and caption for its child control.\n * @example <goat-form-control label='Full Name' required>\n *   <goat-input type='text'></goat-input>\n * </goat-form-control>\n */\n@Component({\n  tag: 'goat-form-control',\n  styleUrl: 'form-control.scss',\n  shadow: true,\n})\nexport class FormControl implements ComponentInterface {\n\n  /**\n   * The label for the form control.\n   */\n  @Prop() label: string;\n\n  /**\n   * The caption for the form control.\n   */\n  @Prop() caption: string;\n\n\n  @Prop() error: string;\n\n  @Prop() warning: string;\n\n  @Prop() success: string;\n\n  @Prop() inline: boolean = false;\n\n  /**\n   * Whether the form control is required.\n   */\n  @Prop() required: boolean = false;\n\n  @Element() elm!: HTMLElement;\n\n  private controlElm!: HTMLElement;\n\n  componentDidLoad() {\n    this.elm.setAttribute('role', 'group');\n    for (const compName of ['goat-input', 'goat-textarea', 'goat-select', 'goat-checkbox', 'goat-radio', 'goat-code-editor']) {\n      this.controlElm = this.elm.querySelector(`${compName}`);\n      this.passRequiredToField(this.required);\n      this.passLabelToField(this.label);\n    }\n  }\n\n  passRequiredToField(required: boolean) {\n    if (this.controlElm) {\n      // @ts-ignore\n      this.controlElm.required = required;\n    }\n  }\n\n  passLabelToField(label: string) {\n    if (this.controlElm) {\n      // @ts-ignore\n      const oldProps = this.controlElm.configAria;\n      // @ts-ignore\n      this.controlElm.configAria = {\n        'aria-label': label,\n        ...oldProps,\n      };\n    }\n  }\n\n  componentShouldUpdate(newVal: any, _oldVal, propName: string): boolean | void {\n    if (propName === 'required') {\n      this.passRequiredToField(newVal);\n    } else if (propName === 'label') {\n      this.passLabelToField(newVal);\n    }\n  }\n\n  renderLabel() {\n    if (this.label)\n      return <label class='label'>\n        {this.required && <span class='required'>*</span>}\n        {this.label}\n      </label>;\n  }\n\n\n  renderSubtitle() {\n    if (this.error)\n      return <div class='subtitle-error'>\n        {this.error}\n      </div>;\n    else if (this.success)\n      return <div class='subtitle-success'>\n        {this.success}\n      </div>;\n    else if (this.warning)\n      return <div class='subtitle-warning'>\n        {this.warning}\n      </div>;\n    else if (this.caption)\n      return <div class='subtitle-caption'>\n        {this.caption}\n      </div>;\n  }\n\n  getInputState() {\n    if (this.error)\n      return 'input-state-error';\n    else if (this.success)\n      return 'input-state-success';\n    else if (this.warning)\n      return 'input-state-warning';\n    return 'input-state-default';\n  }\n\n  render() {\n    return (\n      <Host class={{\n        [this.getInputState()]: true,\n      }}>\n        <div class={{ 'form-control': true, 'inline': this.inline }}>\n          {this.renderLabel()}\n          <div class='field'>\n            <slot />\n          </div>\n          <div class='subtitle'>\n            {this.renderSubtitle()}\n          </div>\n        </div>\n      </Host>\n    );\n  }\n\n}\n"]}