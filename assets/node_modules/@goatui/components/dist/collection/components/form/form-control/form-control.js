import { Component, Element, h, Host, Prop } from '@stencil/core';
/**
 * @name Form Control
 * @description The Form Control component adds a label and caption for its child control.
 * @example <goat-form-control label='Full Name' required>
 *   <goat-input type='text'></goat-input>
 * </goat-form-control>
 */
export class FormControl {
  constructor() {
    this.inline = false;
    /**
     * Whether the form control is required.
     */
    this.required = false;
  }
  componentDidLoad() {
    this.elm.setAttribute('role', 'group');
    for (const compName of ['goat-input', 'goat-textarea', 'goat-select', 'goat-checkbox', 'goat-radio', 'goat-code-editor']) {
      this.controlElm = this.elm.querySelector(`${compName}`);
      this.passRequiredToField(this.required);
      this.passLabelToField(this.label);
    }
  }
  passRequiredToField(required) {
    if (this.controlElm) {
      // @ts-ignore
      this.controlElm.required = required;
    }
  }
  passLabelToField(label) {
    if (this.controlElm) {
      // @ts-ignore
      const oldProps = this.controlElm.configAria;
      // @ts-ignore
      this.controlElm.configAria = Object.assign({ 'aria-label': label }, oldProps);
    }
  }
  componentShouldUpdate(newVal, _oldVal, propName) {
    if (propName === 'required') {
      this.passRequiredToField(newVal);
    }
    else if (propName === 'label') {
      this.passLabelToField(newVal);
    }
  }
  renderLabel() {
    if (this.label)
      return h("label", { class: 'label' },
        this.required && h("span", { class: 'required' }, "*"),
        this.label);
  }
  renderSubtitle() {
    if (this.error)
      return h("div", { class: 'subtitle-error' }, this.error);
    else if (this.success)
      return h("div", { class: 'subtitle-success' }, this.success);
    else if (this.warning)
      return h("div", { class: 'subtitle-warning' }, this.warning);
    else if (this.caption)
      return h("div", { class: 'subtitle-caption' }, this.caption);
  }
  getInputState() {
    if (this.error)
      return 'input-state-error';
    else if (this.success)
      return 'input-state-success';
    else if (this.warning)
      return 'input-state-warning';
    return 'input-state-default';
  }
  render() {
    return (h(Host, { class: {
        [this.getInputState()]: true,
      } },
      h("div", { class: { 'form-control': true, 'inline': this.inline } },
        this.renderLabel(),
        h("div", { class: 'field' },
          h("slot", null)),
        h("div", { class: 'subtitle' }, this.renderSubtitle()))));
  }
  static get is() { return "goat-form-control"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() { return {
    "$": ["form-control.scss"]
  }; }
  static get styleUrls() { return {
    "$": ["form-control.css"]
  }; }
  static get properties() { return {
    "label": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "The label for the form control."
      },
      "attribute": "label",
      "reflect": false
    },
    "caption": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "The caption for the form control."
      },
      "attribute": "caption",
      "reflect": false
    },
    "error": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": ""
      },
      "attribute": "error",
      "reflect": false
    },
    "warning": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": ""
      },
      "attribute": "warning",
      "reflect": false
    },
    "success": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": ""
      },
      "attribute": "success",
      "reflect": false
    },
    "inline": {
      "type": "boolean",
      "mutable": false,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": ""
      },
      "attribute": "inline",
      "reflect": false,
      "defaultValue": "false"
    },
    "required": {
      "type": "boolean",
      "mutable": false,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Whether the form control is required."
      },
      "attribute": "required",
      "reflect": false,
      "defaultValue": "false"
    }
  }; }
  static get elementRef() { return "elm"; }
}
//# sourceMappingURL=form-control.js.map