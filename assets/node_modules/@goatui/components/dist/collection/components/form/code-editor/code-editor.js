import { Component, Event, h, Host, Method, Prop, State, Watch } from '@stencil/core';
import { debounceEvent, getComponentIndex } from '../../../utils/utils';
import loadMonaco from '../../../3d-party/monaco';
/**
 * @name Code Editor
 * @description A browser based code editor.
 * @img /assets/img/code-editor.png
 */
export class CodeEditor {
  constructor() {
    this.gid = getComponentIndex();
    /**
     * The input field name.
     */
    this.name = `goat-input-${this.gid}`;
    /**
     * If true, required icon is show. Defaults to `false`.
     */
    this.required = false;
    /**
     * If true, the user cannot interact with the button. Defaults to `false`.
     */
    this.disabled = false;
    this.readonly = false;
    this.theme = 'vs-light';
    this.language = 'javascript';
    this.lineNumbers = 'on';
    /**
     * Set the amount of time, in milliseconds, to wait to trigger the `onChange` event after each keystroke.
     */
    this.debounce = 250;
    this.hasFocus = false;
  }
  debounceChanged() {
    this.p4Change = debounceEvent(this.p4Change, this.debounce);
  }
  disabledWatcher(newValue) {
    this.editorMonacoInstance.updateOptions({ readOnly: newValue || this.readonly });
  }
  readonlyWatcher(newValue) {
    this.editorMonacoInstance.updateOptions({ readOnly: newValue || this.disabled });
  }
  languageWatcher(newValue) {
    window['monaco'].editor.setModelLanguage(this.editorMonacoInstance.getModel(), newValue);
  }
  themeWatcher(newValue) {
    window['monaco'].editor.setTheme(newValue);
  }
  valueWatcher(newValue) {
    if (this.editorMonacoInstance.getValue() !== this.value) {
      this.editorMonacoInstance.setValue(newValue);
    }
  }
  async getComponentId() {
    return this.gid;
  }
  /**
   * Sets focus on the native `input` in `goat-input`. Use this method instead of the global
   * `input.focus()`.
   */
  async setFocus() {
    if (this.editorMonacoInstance) {
      this.editorMonacoInstance.focus();
    }
  }
  /**
   * Sets blur on the native `input` in `goat-input`. Use this method instead of the global
   * `input.blur()`.
   */
  async setBlur() {
    if (this.editorMonacoInstance) {
      this.editorMonacoInstance.blur();
    }
  }
  async componentWillLoad() {
    this.debounceChanged();
    if (!window['monaco']) {
      await loadMonaco();
    }
  }
  componentDidLoad() {
    setTimeout(() => this.initializeMonaco(), 1000);
  }
  initializeMonaco() {
    const monaco = window['monaco'];
    //monaco.languages.typescript.javascriptDefaults.addExtraLib(this.extraLibs);
    this.editorElement.innerHTML = '';
    this.editorMonacoInstance = monaco.editor.create(this.editorElement, {
      value: this.value,
      lineNumbers: this.lineNumbers,
      language: this.language,
      theme: this.theme,
      readOnly: this.disabled || this.readonly,
    });
    this.editorMonacoInstance.onDidChangeModelContent(() => {
      this.value = this.editorMonacoInstance.getValue();
      this.p4Change.emit({ value: this.value });
    });
    this.editorMonacoInstance.onDidFocusEditorText(() => {
      this.hasFocus = true;
    });
    this.editorMonacoInstance.onDidBlurEditorText(() => {
      this.hasFocus = false;
    });
  }
  render() {
    return (h(Host, null,
      h("div", { class: {
          'component': true,
          'code-editor-component': true,
          [this.theme]: true,
          'disabled': this.disabled,
          'readonly': this.readonly,
          'has-focus': this.hasFocus,
        } },
        h("div", { class: 'editor', ref: el => this.editorElement = el }),
        !this.editorMonacoInstance && h("div", { class: 'code-editor-loader' },
          h("goat-spinner", { class: 'rainbow' }),
          "Loading editor..."))));
  }
  static get is() { return "goat-code-editor"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() { return {
    "$": ["code-editor.scss"]
  }; }
  static get styleUrls() { return {
    "$": ["code-editor.css"]
  }; }
  static get properties() { return {
    "name": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "The input field name."
      },
      "attribute": "name",
      "reflect": false,
      "defaultValue": "`goat-input-${this.gid}`"
    },
    "value": {
      "type": "string",
      "mutable": true,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "The input field value."
      },
      "attribute": "value",
      "reflect": false
    },
    "required": {
      "type": "boolean",
      "mutable": false,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "If true, required icon is show. Defaults to `false`."
      },
      "attribute": "required",
      "reflect": true,
      "defaultValue": "false"
    },
    "disabled": {
      "type": "boolean",
      "mutable": false,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "If true, the user cannot interact with the button. Defaults to `false`."
      },
      "attribute": "disabled",
      "reflect": true,
      "defaultValue": "false"
    },
    "readonly": {
      "type": "boolean",
      "mutable": false,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": ""
      },
      "attribute": "readonly",
      "reflect": true,
      "defaultValue": "false"
    },
    "theme": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "'vs-light' | 'vs-dark'",
        "resolved": "\"vs-dark\" | \"vs-light\"",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": ""
      },
      "attribute": "theme",
      "reflect": false,
      "defaultValue": "'vs-light'"
    },
    "language": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "'javascript' | 'json' | 'html'",
        "resolved": "\"html\" | \"javascript\" | \"json\"",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": ""
      },
      "attribute": "language",
      "reflect": false,
      "defaultValue": "'javascript'"
    },
    "lineNumbers": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "'off' | 'on'",
        "resolved": "\"off\" | \"on\"",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": ""
      },
      "attribute": "line-numbers",
      "reflect": false,
      "defaultValue": "'on'"
    },
    "debounce": {
      "type": "number",
      "mutable": false,
      "complexType": {
        "original": "number",
        "resolved": "number",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Set the amount of time, in milliseconds, to wait to trigger the `onChange` event after each keystroke."
      },
      "attribute": "debounce",
      "reflect": false,
      "defaultValue": "250"
    }
  }; }
  static get states() { return {
    "hasFocus": {},
    "editorMonacoInstance": {}
  }; }
  static get events() { return [{
      "method": "p4Change",
      "name": "goat:change",
      "bubbles": true,
      "cancelable": true,
      "composed": true,
      "docs": {
        "tags": [],
        "text": "Emitted when the value has changed.."
      },
      "complexType": {
        "original": "any",
        "resolved": "any",
        "references": {}
      }
    }]; }
  static get methods() { return {
    "getComponentId": {
      "complexType": {
        "signature": "() => Promise<string>",
        "parameters": [],
        "references": {
          "Promise": {
            "location": "global"
          }
        },
        "return": "Promise<string>"
      },
      "docs": {
        "text": "",
        "tags": []
      }
    },
    "setFocus": {
      "complexType": {
        "signature": "() => Promise<void>",
        "parameters": [],
        "references": {
          "Promise": {
            "location": "global"
          }
        },
        "return": "Promise<void>"
      },
      "docs": {
        "text": "Sets focus on the native `input` in `goat-input`. Use this method instead of the global\n`input.focus()`.",
        "tags": []
      }
    },
    "setBlur": {
      "complexType": {
        "signature": "() => Promise<void>",
        "parameters": [],
        "references": {
          "Promise": {
            "location": "global"
          }
        },
        "return": "Promise<void>"
      },
      "docs": {
        "text": "Sets blur on the native `input` in `goat-input`. Use this method instead of the global\n`input.blur()`.",
        "tags": []
      }
    }
  }; }
  static get watchers() { return [{
      "propName": "debounce",
      "methodName": "debounceChanged"
    }, {
      "propName": "disabled",
      "methodName": "disabledWatcher"
    }, {
      "propName": "readonly",
      "methodName": "readonlyWatcher"
    }, {
      "propName": "language",
      "methodName": "languageWatcher"
    }, {
      "propName": "theme",
      "methodName": "themeWatcher"
    }, {
      "propName": "value",
      "methodName": "valueWatcher"
    }]; }
}
//# sourceMappingURL=code-editor.js.map