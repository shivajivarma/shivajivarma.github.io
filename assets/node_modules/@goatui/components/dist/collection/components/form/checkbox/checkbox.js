import { Component, Element, Event, h, Host, Listen, Method, Prop, State, } from '@stencil/core';
import { getComponentIndex } from '../../../utils/utils';
/**
 * @name Checkbox
 * @description Captures boolean input with an optional indeterminate mode.
 * @example <goat-checkbox value='true'>Want ice cream?</goat-checkbox>
 */
export class Checkbox {
  constructor() {
    this.gid = getComponentIndex();
    /**
     * The input field name.
     */
    this.name = `goat-input-${this.gid}`;
    /**
     * The input field value.
     */
    this.value = false;
    this.intermediate = false;
    this.rounded = false;
    /**
     * The button size.
     * Possible values are: `"sm"`, `"md"`, `"lg"`. Defaults to `"md"`.
     */
    this.size = 'md';
    /**
     * If true, required icon is show. Defaults to `false`.
     */
    this.required = false;
    this.readonly = false;
    /**
     * If true, the user cannot interact with the button. Defaults to `false`.
     */
    this.disabled = false;
    this.configAria = {};
    this.mouseDownHandler = () => {
      this.isActive = true;
    };
    this.keyDownHandler = (evt) => {
      if (evt.key == ' ') {
        evt.preventDefault();
        this.isActive = true;
        this.clickHandler(evt);
      }
    };
    this.tabindex = 1;
    this.hasFocus = false;
    this.animate = true;
    this.isActive = false;
    this.slotHasContent = false;
    this.clickHandler = (ev) => {
      if (!this.disabled && !this.readonly) {
        this.value = !JSON.parse(this.nativeInput.value);
        this.intermediate = false;
        this.goatChange.emit(ev);
        this.iconContainer.focus();
      }
    };
    this.blurHandler = (ev) => {
      this.hasFocus = false;
      this.goatBlur.emit(ev);
    };
    this.focusHandler = (ev) => {
      this.hasFocus = true;
      this.goatFocus.emit(ev);
    };
  }
  async getComponentId() {
    return this.gid;
  }
  /**
   * Sets focus on the native `input` in `goat-input`. Use this method instead of the global
   * `input.focus()`.
   */
  async setFocus() {
    if (this.nativeInput) {
      this.nativeInput.focus();
    }
  }
  /**
   * Sets blur on the native `input` in `goat-input`. Use this method instead of the global
   * `input.blur()`.
   */
  async setBlur() {
    if (this.nativeInput) {
      this.nativeInput.blur();
    }
  }
  windowMouseUp() {
    if (this.isActive)
      this.isActive = false;
  }
  windowKeyUp(evt) {
    if (this.isActive && (evt.key == ' '))
      this.isActive = false;
  }
  componentWillLoad() {
    // If the ion-input has a tabindex attribute we get the value
    // and pass it down to the native input, then remove it from the
    // goat-input to avoid causing tabbing twice on the same element
    if (this.elm.hasAttribute('tabindex')) {
      const tabindex = this.elm.getAttribute('tabindex');
      this.tabindex = tabindex !== null ? tabindex : undefined;
      this.elm.removeAttribute('tabindex');
    }
    this.elm.getAttributeNames().forEach((name) => {
      if (name.includes('aria-')) {
        this.configAria[name] = this.elm.getAttribute(name);
        this.elm.removeAttribute(name);
      }
    });
    this.slotHasContent = this.elm.hasChildNodes();
  }
  render() {
    return (h(Host, { "has-focus": this.hasFocus, active: this.isActive },
      h("label", { class: {
          'checkbox': true,
          'state-checked': this.value,
          'state-intermediate': !this.value && this.intermediate,
          [`size-${this.size}`]: true,
          'has-focus': this.hasFocus,
          'active': this.isActive,
          'disabled': this.disabled,
          'readonly': this.readonly,
          'required': this.required,
          'rounded': this.rounded,
          'has-content': this.slotHasContent,
        } },
        h("div", Object.assign({ class: 'box', tabindex: this.tabindex, ref: elm => this.iconContainer = elm, onKeyUp: (evt) => {
            if (evt.keyCode === 13) {
              this.clickHandler(evt);
            }
          }, onMouseDown: this.mouseDownHandler, onKeyDown: this.keyDownHandler, onBlur: this.blurHandler, onFocus: this.focusHandler, role: "checkbox", "aria-disabled": this.disabled + '', "aria-required": this.required + '', "aria-checked": this.value + '' }, this.configAria),
          h("div", { class: {
              'tick': true,
              'animate': this.animate,
            } })),
        h("input", { type: 'checkbox', class: 'input-native', name: this.name, value: this.value + '', checked: this.value, "aria-hidden": 'true', required: this.required, ref: elm => this.nativeInput = elm, tabindex: '-1', onClick: this.clickHandler }),
        h("div", { class: 'slot-container' },
          h("slot", null)))));
  }
  static get is() { return "goat-checkbox"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() { return {
    "$": ["checkbox.scss"]
  }; }
  static get styleUrls() { return {
    "$": ["checkbox.css"]
  }; }
  static get properties() { return {
    "name": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "The input field name."
      },
      "attribute": "name",
      "reflect": false,
      "defaultValue": "`goat-input-${this.gid}`"
    },
    "label": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "The checkbox label."
      },
      "attribute": "label",
      "reflect": false
    },
    "value": {
      "type": "boolean",
      "mutable": true,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "The input field value."
      },
      "attribute": "value",
      "reflect": false,
      "defaultValue": "false"
    },
    "intermediate": {
      "type": "boolean",
      "mutable": true,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": ""
      },
      "attribute": "intermediate",
      "reflect": false,
      "defaultValue": "false"
    },
    "rounded": {
      "type": "boolean",
      "mutable": false,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": ""
      },
      "attribute": "rounded",
      "reflect": false,
      "defaultValue": "false"
    },
    "size": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "'sm' | 'md' | 'lg'",
        "resolved": "\"lg\" | \"md\" | \"sm\"",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "The button size.\nPossible values are: `\"sm\"`, `\"md\"`, `\"lg\"`. Defaults to `\"md\"`."
      },
      "attribute": "size",
      "reflect": false,
      "defaultValue": "'md'"
    },
    "required": {
      "type": "boolean",
      "mutable": false,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "If true, required icon is show. Defaults to `false`."
      },
      "attribute": "required",
      "reflect": true,
      "defaultValue": "false"
    },
    "readonly": {
      "type": "boolean",
      "mutable": false,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": ""
      },
      "attribute": "readonly",
      "reflect": true,
      "defaultValue": "false"
    },
    "disabled": {
      "type": "boolean",
      "mutable": false,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "If true, the user cannot interact with the button. Defaults to `false`."
      },
      "attribute": "disabled",
      "reflect": true,
      "defaultValue": "false"
    },
    "configAria": {
      "type": "any",
      "mutable": true,
      "complexType": {
        "original": "any",
        "resolved": "any",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": ""
      },
      "attribute": "config-aria",
      "reflect": true,
      "defaultValue": "{}"
    }
  }; }
  static get states() { return {
    "hasFocus": {},
    "animate": {},
    "isActive": {},
    "slotHasContent": {}
  }; }
  static get events() { return [{
      "method": "goatChange",
      "name": "goat:change",
      "bubbles": true,
      "cancelable": true,
      "composed": true,
      "docs": {
        "tags": [],
        "text": "On change of input a CustomEvent 'goat:change' will be triggered. Event details contains parent event, oldValue, newValue of input."
      },
      "complexType": {
        "original": "any",
        "resolved": "any",
        "references": {}
      }
    }, {
      "method": "goatBlur",
      "name": "goat:blur",
      "bubbles": true,
      "cancelable": true,
      "composed": true,
      "docs": {
        "tags": [],
        "text": "Emitted when the input loses focus."
      },
      "complexType": {
        "original": "any",
        "resolved": "any",
        "references": {}
      }
    }, {
      "method": "goatFocus",
      "name": "goat:focus",
      "bubbles": true,
      "cancelable": true,
      "composed": true,
      "docs": {
        "tags": [],
        "text": "Emitted when the input has focus."
      },
      "complexType": {
        "original": "any",
        "resolved": "any",
        "references": {}
      }
    }]; }
  static get methods() { return {
    "getComponentId": {
      "complexType": {
        "signature": "() => Promise<string>",
        "parameters": [],
        "references": {
          "Promise": {
            "location": "global"
          }
        },
        "return": "Promise<string>"
      },
      "docs": {
        "text": "",
        "tags": []
      }
    },
    "setFocus": {
      "complexType": {
        "signature": "() => Promise<void>",
        "parameters": [],
        "references": {
          "Promise": {
            "location": "global"
          }
        },
        "return": "Promise<void>"
      },
      "docs": {
        "text": "Sets focus on the native `input` in `goat-input`. Use this method instead of the global\n`input.focus()`.",
        "tags": []
      }
    },
    "setBlur": {
      "complexType": {
        "signature": "() => Promise<void>",
        "parameters": [],
        "references": {
          "Promise": {
            "location": "global"
          }
        },
        "return": "Promise<void>"
      },
      "docs": {
        "text": "Sets blur on the native `input` in `goat-input`. Use this method instead of the global\n`input.blur()`.",
        "tags": []
      }
    }
  }; }
  static get elementRef() { return "elm"; }
  static get listeners() { return [{
      "name": "mouseup",
      "method": "windowMouseUp",
      "target": "window",
      "capture": false,
      "passive": true
    }, {
      "name": "keyup",
      "method": "windowKeyUp",
      "target": "window",
      "capture": false,
      "passive": false
    }]; }
}
//# sourceMappingURL=checkbox.js.map