import { Component, Element, Event, h, Host, Listen, Method, Prop, State, } from '@stencil/core';
import { ElementSize, getComponentIndex } from '../../../utils/utils';
/**
 * @name Button
 * @description An interactive button with a range of presentation options.
 * @example <goat-button>
 *   Button CTA
 *   </goat-button>
 */
export class Button {
  constructor() {
    this.gid = getComponentIndex();
    /**
     * Button size.
     * Possible values are `"sm"`, `"md"`, `"lg"`, `"xl"`, `"xxl"`. Defaults to `"md"`.
     */
    this.size = 'md';
    this.variant = 'default';
    /**
     * If true, fits button width to its parent width. Defaults to `false`.
     */
    this.block = false;
    /**
     * Button selection state.
     */
    this.selected = false;
    /**
     * If true, the user cannot interact with the button. Defaults to `false`.
     */
    this.disabled = false;
    this.disabledReason = '';
    /**
     * Icon position.
     */
    this.iconEnd = false;
    /**
     * Show loader.
     */
    this.showLoader = false;
    this.configAria = {};
    /**
     * Sets or retrieves the window or frame at which to target content.
     */
    this.target = '_self';
    this.hasFocus = false;
    this.isActive = false;
    this.slotHasContent = false;
    this.renderIcon = () => {
      return h("goat-icon", { name: this.icon, size: this.getIconSize(), class: 'icon inherit' });
    };
    this.clickHandler = (event) => {
      if (!this.disabled && !this.showLoader) {
        if (this.href) {
          window.open(this.href, this.target);
        }
        this.goatClick.emit();
      }
      else {
        event.preventDefault();
        event.stopPropagation();
        return;
      }
    };
    this.blurHandler = () => {
      this.hasFocus = false;
    };
    this.focusHandler = () => {
      this.hasFocus = true;
    };
    this.mouseDownHandler = () => {
      this.isActive = true;
    };
    this.keyDownHandler = (evt) => {
      if (evt.key == ' ') {
        this.isActive = true;
        this.clickHandler(evt);
      }
    };
  }
  windowMouseUp() {
    if (this.isActive)
      this.isActive = false;
  }
  windowKeyUp(evt) {
    if (this.isActive && (evt.key == ' '))
      this.isActive = false;
  }
  async setFocus() {
    if (this.nativeInput) {
      this.nativeInput.focus();
    }
  }
  async triggerClick() {
    if (this.nativeInput) {
      this.nativeInput.click();
    }
  }
  getIconSize() {
    switch (this.size) {
      case ElementSize.SMALL:
        return 'sm';
      case ElementSize.LARGE:
        return 'md';
      case ElementSize.X_LARGE:
        return 'md';
      case ElementSize.XX_LARGE:
        return 'lg';
      default:
        return 'sm';
    }
  }
  componentWillLoad() {
    // If the ion-input has a tabindex attribute we get the value
    // and pass it down to the native input, then remove it from the
    // goat-input to avoid causing tabbing twice on the same element
    if (this.elm.hasAttribute('tabindex')) {
      const tabindex = this.elm.getAttribute('tabindex');
      this.tabindex = tabindex !== null ? tabindex : undefined;
      this.elm.removeAttribute('tabindex');
    }
    this.elm.getAttributeNames().forEach((name) => {
      if (name.includes('aria-')) {
        this.configAria[name] = this.elm.getAttribute(name);
        this.elm.removeAttribute(name);
      }
    });
    this.slotHasContent = this.elm.hasChildNodes();
  }
  renderDisabledReason() {
    if (this.disabled && this.disabledReason)
      return h("div", { id: `disabled-reason-${this.gid}`, role: 'tooltip', class: 'sr-only' }, this.disabledReason);
  }
  render() {
    let NativeElementTag = 'button';
    if (this.href) {
      NativeElementTag = 'a';
    }
    return (h(Host, { "has-focus": this.hasFocus, active: this.isActive },
      h("div", { class: {
          button: true,
          [`size-${this.size}`]: true,
          block: this.block,
          [`variant-${this.variant}`]: true,
          'disabled': this.disabled,
          'selected': this.selected,
          'has-focus': this.hasFocus,
          'active': this.isActive,
          'has-content': this.slotHasContent,
          'icon-end': this.iconEnd,
          'show-loader': this.showLoader,
        } },
        h("div", { class: 'button-background' }),
        h(NativeElementTag, Object.assign({ class: 'native-button', tabindex: this.tabindex, href: this.href, target: this.target, ref: input => this.nativeInput = input, onBlur: this.blurHandler, onFocus: this.focusHandler, onClick: this.clickHandler, onMouseDown: this.mouseDownHandler, onKeyDown: this.keyDownHandler, "aria-describedby": this.disabled && this.disabledReason ? `disabled-reason-${this.gid}` : null, "aria-disabled": (this.disabled || this.showLoader) + '' }, this.configAria),
          h("div", { class: 'button-content' },
            this.showLoader && h("goat-spinner", { class: 'spinner inherit', size: this.getIconSize() }),
            !this.showLoader && this.icon && this.renderIcon(),
            !this.showLoader && h("div", { class: 'slot-container' },
              h("slot", null)))),
        this.renderDisabledReason())));
  }
  static get is() { return "goat-button"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() { return {
    "$": ["button.scss"]
  }; }
  static get styleUrls() { return {
    "$": ["button.css"]
  }; }
  static get properties() { return {
    "size": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "'sm' | 'md' | 'lg' | 'xl' | 'xxl'",
        "resolved": "\"lg\" | \"md\" | \"sm\" | \"xl\" | \"xxl\"",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Button size.\nPossible values are `\"sm\"`, `\"md\"`, `\"lg\"`, `\"xl\"`, `\"xxl\"`. Defaults to `\"md\"`."
      },
      "attribute": "size",
      "reflect": false,
      "defaultValue": "'md'"
    },
    "variant": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "'default' | 'light' | 'outline' | 'ghost' | 'link'",
        "resolved": "\"default\" | \"ghost\" | \"light\" | \"link\" | \"outline\"",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": ""
      },
      "attribute": "variant",
      "reflect": false,
      "defaultValue": "'default'"
    },
    "block": {
      "type": "boolean",
      "mutable": false,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "If true, fits button width to its parent width. Defaults to `false`."
      },
      "attribute": "block",
      "reflect": true,
      "defaultValue": "false"
    },
    "selected": {
      "type": "boolean",
      "mutable": false,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Button selection state."
      },
      "attribute": "selected",
      "reflect": true,
      "defaultValue": "false"
    },
    "disabled": {
      "type": "boolean",
      "mutable": false,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "If true, the user cannot interact with the button. Defaults to `false`."
      },
      "attribute": "disabled",
      "reflect": true,
      "defaultValue": "false"
    },
    "disabledReason": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": ""
      },
      "attribute": "disabled-reason",
      "reflect": false,
      "defaultValue": "''"
    },
    "icon": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Icon which will displayed on button.\nPossible values are bootstrap icon names."
      },
      "attribute": "icon",
      "reflect": false
    },
    "iconEnd": {
      "type": "boolean",
      "mutable": false,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Icon position."
      },
      "attribute": "icon-end",
      "reflect": false,
      "defaultValue": "false"
    },
    "showLoader": {
      "type": "boolean",
      "mutable": false,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Show loader."
      },
      "attribute": "show-loader",
      "reflect": false,
      "defaultValue": "false"
    },
    "href": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Hyperlink to navigate to on click."
      },
      "attribute": "href",
      "reflect": false
    },
    "configAria": {
      "type": "any",
      "mutable": true,
      "complexType": {
        "original": "any",
        "resolved": "any",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": ""
      },
      "attribute": "config-aria",
      "reflect": true,
      "defaultValue": "{}"
    },
    "target": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Sets or retrieves the window or frame at which to target content."
      },
      "attribute": "target",
      "reflect": false,
      "defaultValue": "'_self'"
    }
  }; }
  static get states() { return {
    "hasFocus": {},
    "isActive": {},
    "slotHasContent": {}
  }; }
  static get events() { return [{
      "method": "goatClick",
      "name": "goat:click",
      "bubbles": true,
      "cancelable": true,
      "composed": true,
      "docs": {
        "tags": [],
        "text": "On click of button, a CustomEvent 'goat:click' will be triggered."
      },
      "complexType": {
        "original": "any",
        "resolved": "any",
        "references": {}
      }
    }]; }
  static get methods() { return {
    "setFocus": {
      "complexType": {
        "signature": "() => Promise<void>",
        "parameters": [],
        "references": {
          "Promise": {
            "location": "global"
          }
        },
        "return": "Promise<void>"
      },
      "docs": {
        "text": "",
        "tags": []
      }
    },
    "triggerClick": {
      "complexType": {
        "signature": "() => Promise<void>",
        "parameters": [],
        "references": {
          "Promise": {
            "location": "global"
          }
        },
        "return": "Promise<void>"
      },
      "docs": {
        "text": "",
        "tags": []
      }
    }
  }; }
  static get elementRef() { return "elm"; }
  static get listeners() { return [{
      "name": "mouseup",
      "method": "windowMouseUp",
      "target": "window",
      "capture": false,
      "passive": true
    }, {
      "name": "keyup",
      "method": "windowKeyUp",
      "target": "window",
      "capture": false,
      "passive": false
    }]; }
}
//# sourceMappingURL=button.js.map