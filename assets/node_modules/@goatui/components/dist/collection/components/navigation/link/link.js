import { Component, Element, h, Host, Listen, Method, Prop, State } from '@stencil/core';
import { getComponentIndex } from '../../../utils/utils';
/**
 * @name Link
 * @description Links allow users to click their way from page to page.
 * @example <goat-link>Link</goat-link>
 */
export class Link {
  constructor() {
    this.gid = getComponentIndex();
    this.hasFocus = false;
    this.isActive = false;
    this.tabindex = 1;
    this.blurHandler = () => {
      this.hasFocus = false;
    };
    this.focusHandler = () => {
      this.hasFocus = true;
    };
    this.mouseDownHandler = () => {
      this.isActive = true;
    };
    this.keyDownHandler = (evt) => {
      if (evt.key == 'Enter' || evt.key == ' ') {
        this.isActive = true;
      }
    };
  }
  windowMouseUp() {
    if (this.isActive)
      this.isActive = false;
  }
  windowKeyUp(evt) {
    if (this.isActive && (evt.key == 'Enter' || evt.key == ' '))
      this.isActive = false;
  }
  async triggerClick() {
    if (this.nativeInput) {
      this.nativeInput.click();
    }
  }
  componentWillLoad() {
    // If the ion-input has a tabindex attribute we get the value
    // and pass it down to the native input, then remove it from the
    // goat-input to avoid causing tabbing twice on the same element
    if (this.elm.hasAttribute('tabindex')) {
      const tabindex = this.elm.getAttribute('tabindex');
      this.tabindex = tabindex !== null ? tabindex : undefined;
      this.elm.removeAttribute('tabindex');
    }
    if (this.elm.hasAttribute('itemprop')) {
      const tabindex = this.elm.getAttribute('itemprop');
      this.itemprop = tabindex !== null ? tabindex : undefined;
      this.elm.removeAttribute('itemprop');
    }
  }
  render() {
    return (h(Host, { "has-focus": this.hasFocus, active: this.isActive },
      h("a", { class: {
          'link': true,
          'has-focus': this.hasFocus,
          'active': this.isActive,
        }, href: this.href, target: this.target, itemprop: this.itemprop, ref: input => this.nativeInput = input, tabindex: this.tabindex, onBlur: this.blurHandler, onFocus: this.focusHandler, onMouseDown: this.mouseDownHandler, onKeyDown: this.keyDownHandler },
        h("slot", null))));
  }
  static get is() { return "goat-link"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() { return {
    "$": ["link.scss"]
  }; }
  static get styleUrls() { return {
    "$": ["link.css"]
  }; }
  static get properties() { return {
    "href": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Hyperlink to navigate to on click."
      },
      "attribute": "href",
      "reflect": false
    },
    "target": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Sets or retrieves the window or frame at which to target content."
      },
      "attribute": "target",
      "reflect": false
    }
  }; }
  static get states() { return {
    "hasFocus": {},
    "isActive": {}
  }; }
  static get methods() { return {
    "triggerClick": {
      "complexType": {
        "signature": "() => Promise<void>",
        "parameters": [],
        "references": {
          "Promise": {
            "location": "global"
          }
        },
        "return": "Promise<void>"
      },
      "docs": {
        "text": "",
        "tags": []
      }
    }
  }; }
  static get elementRef() { return "elm"; }
  static get listeners() { return [{
      "name": "mouseup",
      "method": "windowMouseUp",
      "target": "window",
      "capture": false,
      "passive": true
    }, {
      "name": "keyup",
      "method": "windowKeyUp",
      "target": "window",
      "capture": false,
      "passive": false
    }]; }
}
//# sourceMappingURL=link.js.map